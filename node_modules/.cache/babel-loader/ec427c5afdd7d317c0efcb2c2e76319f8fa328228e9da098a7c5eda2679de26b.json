{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { useParams } from 'react-router-dom';\nimport START_DATE from '../constant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValue(state.inputValue);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n    }\n  }, [challengeNumber]);\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValue,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValue, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch and parse the CSV file\n  useEffect(() => {\n    Papa.parse('/worldcities.csv', {\n      download: true,\n      header: true,\n      complete: function (results) {\n        const cities = results.data;\n        const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n        setLocations(validCities);\n        initializeGame(validCities);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed);\n    setCurrentChallenge(challenge);\n    setInputValue(''); // Reset input value\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n  }\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + (challengeNumber - 1) * 24 * 60 * 60 * 1000);\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n    const clues = generateClues(location);\n    return {\n      level: level,\n      answer: location.city_ascii,\n      // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`\n    };\n  }\n  function generateClues(location) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country.borders && country.borders.length > 0) {\n      clues.push(`\"You'll pass by ${country.borders.length} neighboring lands on your journey.\"`);\n    } else {\n      clues.push(`\"The land you seek stands alone with no neighboring countries.\"`);\n    }\n\n    // Clue 4: Alternate between Flag colors and Compass Clue\n    if (Math.random() < 0.5) {\n      // Compass Clue\n      const regionHint = generateCompassClue(country);\n      clues.push(regionHint);\n    } else {\n      // Flag colors\n      const colors = getFlagColors(country.flags.png);\n      if (colors.length > 0) {\n        clues.push(`\"Hoist the flag with colors of ${colors.join(', ')}.\"`);\n      }\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n    const randomFeature = features[Math.floor(Math.random() * features.length)];\n    clues.push(`You'll traverse ${randomFeature} on your journey.`);\n    return clues;\n  }\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n    let clue = 'Your treasure lies';\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n    return clue;\n  }\n  function handleSubmit() {\n    const userAnswer = inputValue.trim().toUpperCase();\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValue(''); // Clear the input field\n\n    if (userAnswer === currentChallenge.answer.toUpperCase()) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(location => location.city_ascii.toUpperCase() === userAnswer.toUpperCase());\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase() === currentChallenge.answer.toUpperCase();\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  if (!currentChallenge) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Challenge No. ${challengeNumber}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: currentChallenge.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"list-unstyled\",\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-input\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && handleSubmit(),\n        disabled: gameEnded,\n        className: \"form-control\",\n        placeholder: \"Enter city name\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), guessHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: guessHistory.map((guess, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: guess\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight EST!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary ml-2\",\n        onClick: shareChallenge,\n        children: \"Share This Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n}\n_s(Challenge, \"XWGgO1LD3+wEpwZYSuOlvaMIfbk=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","useParams","START_DATE","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","locations","setLocations","currentChallenge","setCurrentChallenge","inputValue","setInputValue","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","guessHistory","setGuessHistory","inputValues","setInputValues","inputRefs","savedState","localStorage","getItem","state","JSON","parse","setItem","stringify","download","header","complete","results","cities","data","validCities","filter","city","city_ascii","lat","lng","population","initializeGame","locationData","seed","calculateSeedFromNumber","challenge","generateChallenge","level","startDate","Date","seedDate","getTime","getFullYear","getMonth","getDate","levels","parseInt","levelKeys","Object","keys","levelIndex","length","locationsInLevel","locationIndex","location","clues","generateClues","answer","fact","country","Math","random","parseFloat","latDirection","push","abs","toFixed","lngDirection","compassClue","generateCompassClue","borders","regionHint","colors","getFlagColors","flags","png","join","languageClue","generateLanguageClue","randomFeature","features","floor","clue","handleSubmit","userAnswer","trim","toUpperCase","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedLocation","find","guessedLat","guessedLng","actualLat","actualLng","latDifference","lngDifference","copyResult","result","forEach","guess","index","isCorrect","status","navigator","clipboard","writeText","alert","shareChallenge","url","window","origin","children","fileName","_jsxFileName","lineNumber","columnNumber","className","date","map","type","value","onChange","e","target","onKeyDown","key","disabled","placeholder","autoFocus","onClick","Array","fill","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { useParams } from 'react-router-dom';\nimport START_DATE from '../constant.js'\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValue(state.inputValue);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n    }\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValue,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory,\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValue, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n  \n  // Fetch and parse the CSV file\n  useEffect(() => {\n    Papa.parse('/worldcities.csv', {\n      download: true,\n      header: true,\n      complete: function (results) {\n        const cities = results.data;\n        const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n        setLocations(validCities);\n        initializeGame(validCities);\n      },\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed);\n    setCurrentChallenge(challenge);\n    setInputValue(''); // Reset input value\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n  }\n\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + ((challengeNumber - 1) * 24 * 60 * 60 * 1000));\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000),\n    };\n\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n\n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n\n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n\n    const clues = generateClues(location);\n\n    return {\n      level: level,\n      answer: location.city_ascii, // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`,\n    };\n  }\n\n  function generateClues(location) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country.borders && country.borders.length > 0) {\n      clues.push(`\"You'll pass by ${country.borders.length} neighboring lands on your journey.\"`);\n    } else {\n      clues.push(`\"The land you seek stands alone with no neighboring countries.\"`);\n    }\n\n    // Clue 4: Alternate between Flag colors and Compass Clue\n    if (Math.random() < 0.5) {\n      // Compass Clue\n      const regionHint = generateCompassClue(country);\n      clues.push(regionHint);\n    } else {\n      // Flag colors\n      const colors = getFlagColors(country.flags.png);\n      if (colors.length > 0) {\n        clues.push(`\"Hoist the flag with colors of ${colors.join(', ')}.\"`);\n      }\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n\n    const randomFeature = features[Math.floor(Math.random() * features.length)];\n    clues.push(`You'll traverse ${randomFeature} on your journey.`);\n\n    return clues;\n  }\n\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n\n    let clue = 'Your treasure lies';\n\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n\n    return clue;\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValue.trim().toUpperCase();\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValue(''); // Clear the input field\n\n    if (userAnswer === currentChallenge.answer.toUpperCase()) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(\n      (location) => location.city_ascii.toUpperCase() === userAnswer.toUpperCase()\n    );\n\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase() === currentChallenge.answer.toUpperCase();\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n\n  if (!currentChallenge) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"today-challenge\">\n      <h2>{`Challenge No. ${challengeNumber}`}</h2>\n      <h4>{currentChallenge.date}</h4>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues text-center\">\n        <h3>🗺️ Clues:</h3>\n        <ol className=\"list-unstyled\">\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ol>\n      </div>\n      <div className=\"answer-input\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyDown={(e) => e.key === 'Enter' && handleSubmit()}\n          disabled={gameEnded}\n          className=\"form-control\"\n          placeholder=\"Enter city name\"\n          autoFocus\n        />\n      </div>\n      <button className=\"btn btn-primary\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      {guessHistory.length > 0 && (\n        <div className=\"guess-history\">\n          <h4>Your Guesses:</h4>\n          <ul>\n            {guessHistory.map((guess, index) => (\n              <li key={index}>{guess}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight EST!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n          <button className=\"btn btn-secondary ml-2\" onClick={shareChallenge}>Share This Challenge</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Challenge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}