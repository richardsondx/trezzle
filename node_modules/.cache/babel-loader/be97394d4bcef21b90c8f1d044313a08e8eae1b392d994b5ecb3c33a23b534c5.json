{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Papa from 'papaparse';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  useEffect(() => {\n    // Fetch and parse the CSV file\n    Papa.parse('/worldcities.csv', {\n      download: true,\n      header: true,\n      complete: function (results) {\n        const cities = results.data;\n        // Clean data: remove entries without necessary fields\n        const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n        setLocations(validCities);\n        initializeGame(validCities);\n      }\n    });\n  }, [challengeNumber]);\n  useEffect(() => {\n    // Load city data\n    setLocations(cities);\n    initializeGame(cities);\n  }, [challengeNumber]);\n  useEffect(() => {\n    // Fetch country data\n    axios.get('https://restcountries.com/v3.1/all').then(response => {\n      setCountries(response.data);\n      initializeGame(response.data);\n    }).catch(error => {\n      console.error('Error fetching country data:', error);\n    });\n  }, [challengeNumber]);\n  function initializeGame(countryData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(countryData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date('2022-01-01T00:00:00Z');\n    const seedDate = new Date(startDate.getTime() + (challengeNumber - 1) * 24 * 60 * 60 * 1000);\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n    const clues = generateClues(location);\n    return {\n      level: level,\n      answer: location.city_ascii,\n      // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`\n    };\n  }\n  function generateClues(location) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Geographical feature clue\n    const features = ['a great river', 'towering mountains', 'a vast desert', 'a deep lake', 'a dense forest', 'a sprawling plain', 'a mysterious swamp', 'a rugged coastline'];\n    const randomFeature = features[Math.floor(Math.random() * features.length)];\n    clues.push(`You'll traverse ${randomFeature} on your journey.`);\n\n    // Clue 4: Flag colors\n    const colors = getFlagColors(location.flagUrl);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(location);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n    return clues;\n  }\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n    let clue = 'Your treasure lies';\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n    return clue;\n  }\n  function generateLanguageClue(country) {\n    const languageCodes = country.languages ? Object.keys(country.languages) : [];\n    if (languageCodes.length === 0) return null;\n\n    // Map of language codes to families or scripts\n    const languageFamilies = {\n      'ara': 'Semitic',\n      'zho': 'Sino-Tibetan',\n      'hin': 'Indo-Aryan',\n      'ben': 'Indo-Aryan',\n      'rus': 'Slavic',\n      'jpn': 'Japonic',\n      'deu': 'Germanic',\n      'fra': 'Romance',\n      'spa': 'Romance',\n      'eng': 'Germanic',\n      'por': 'Romance',\n      'ita': 'Romance',\n      'kor': 'Koreanic',\n      'tur': 'Turkic',\n      'vie': 'Austroasiatic',\n      'tam': 'Dravidian',\n      'urd': 'Indo-Aryan',\n      'grn': 'Tupian',\n      'amh': 'Afro-Asiatic'\n      // Add more language code mappings as needed\n    };\n    const scripts = {\n      'Arab': 'abjad script',\n      'Cyrl': 'Cyrillic script',\n      'Hans': 'simplified Chinese characters',\n      'Hant': 'traditional Chinese characters',\n      'Latn': 'Latin script',\n      'Deva': 'Devanagari script',\n      'Beng': 'Bengali script',\n      'Jpan': 'Japanese script',\n      'Kore': 'Hangul script'\n      // Add more script mappings as needed\n    };\n\n    // Get the first language code\n    const langCode = languageCodes[0];\n    const family = languageFamilies[langCode];\n    const script = scripts[country.languages[langCode]];\n    let clue = 'The local tongue ';\n    if (family) {\n      clue += `traces back to the ${family} language family`;\n    } else {\n      clue += 'has ancient roots';\n    }\n    if (script) {\n      clue += `, written in the ${script}`;\n    }\n    clue += '.';\n    return clue;\n  }\n  function getFlagColors(flagUrl) {\n    // Placeholder colors\n    return ['red', 'white', 'blue'];\n  }\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n  function handleSubmit() {\n    const userAnswer = inputValue.trim().toUpperCase();\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValue(''); // Clear the input field\n\n    if (userAnswer === currentChallenge.answer.toUpperCase()) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(location => location.city_ascii.toUpperCase() === userAnswer.toUpperCase());\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLatLng = [parseFloat(guessedLocation.lat), parseFloat(guessedLocation.lng)];\n    const actualLatLng = [parseFloat(currentChallenge.location.lat), parseFloat(currentChallenge.location.lng)];\n    const latDifference = actualLatLng[0] - guessedLatLng[0];\n    const lngDifference = actualLatLng[1] - guessedLatLng[1];\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase() === currentChallenge.answer.toUpperCase();\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n  function shareChallenge() {\n    const url = window.location.href;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  if (!currentChallenge) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Challenge No. ${challengeNumber}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: currentChallenge.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"list-unstyled\",\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-boxes\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && handleSubmit(),\n        disabled: gameEnded,\n        className: \"form-control\",\n        placeholder: \"Enter city name\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: guessHistory.map((guess, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: guess\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight EST!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary ml-2\",\n        onClick: shareChallenge,\n        children: \"Share This Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n}\n_s(Challenge, \"89Kk1yo+EXlB7skaNQmh6bV3guc=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Papa","useParams","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","locations","setLocations","currentChallenge","setCurrentChallenge","inputValue","setInputValue","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","guessHistory","setGuessHistory","parse","download","header","complete","results","cities","data","validCities","filter","city","city_ascii","lat","lng","population","initializeGame","get","then","response","setCountries","catch","error","console","countryData","seed","calculateSeedFromNumber","challenge","generateChallenge","setInputValues","Array","answer","length","fill","level","inputRefs","current","startDate","Date","seedDate","getTime","getFullYear","getMonth","getDate","locationData","levels","parseInt","levelKeys","Object","keys","levelIndex","locationsInLevel","locationIndex","location","clues","generateClues","fact","country","Math","random","parseFloat","latDirection","push","abs","toFixed","lngDirection","compassClue","generateCompassClue","features","randomFeature","floor","colors","getFlagColors","flagUrl","join","languageClue","generateLanguageClue","clue","languageCodes","languages","languageFamilies","scripts","langCode","family","script","handleInputChange","e","index","value","target","toUpperCase","test","newInputValues","inputValues","focus","handleKeyDown","key","handleSubmit","userAnswer","trim","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedLocation","find","guessedLatLng","actualLatLng","latDifference","lngDifference","copyResult","result","forEach","guess","isCorrect","status","navigator","clipboard","writeText","alert","shareChallenge","url","window","href","children","fileName","_jsxFileName","lineNumber","columnNumber","className","date","map","type","onChange","onKeyDown","disabled","placeholder","autoFocus","onClick","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Papa from 'papaparse';\nimport { useParams } from 'react-router-dom';\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n\n  useEffect(() => {\n    // Fetch and parse the CSV file\n    Papa.parse('/worldcities.csv', {\n      download: true,\n      header: true,\n      complete: function(results) {\n        const cities = results.data;\n        // Clean data: remove entries without necessary fields\n        const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n        setLocations(validCities);\n        initializeGame(validCities);\n      },\n    });\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    // Load city data\n    setLocations(cities);\n    initializeGame(cities);\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    // Fetch country data\n    axios.get('https://restcountries.com/v3.1/all')\n      .then(response => {\n        setCountries(response.data);\n        initializeGame(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching country data:', error);\n      });\n  }, [challengeNumber]);\n\n  function initializeGame(countryData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(countryData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date('2022-01-01T00:00:00Z');\n    const seedDate = new Date(startDate.getTime() + ((challengeNumber - 1) * 24 * 60 * 60 * 1000));\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000),\n    };\n  \n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n  \n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n  \n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n  \n    const clues = generateClues(location);\n  \n    return {\n      level: level,\n      answer: location.city_ascii, // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`,\n    };\n  }  \n\n  function generateClues(location) {\n    const clues = [];\n  \n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n  \n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n  \n    // Clue 3: Geographical feature clue\n    const features = [\n      'a great river',\n      'towering mountains',\n      'a vast desert',\n      'a deep lake',\n      'a dense forest',\n      'a sprawling plain',\n      'a mysterious swamp',\n      'a rugged coastline',\n    ];\n\n    const randomFeature = features[Math.floor(Math.random() * features.length)];\n    clues.push(`You'll traverse ${randomFeature} on your journey.`);\n    \n    // Clue 4: Flag colors\n    const colors = getFlagColors(location.flagUrl);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    }\n  \n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(location);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n  \n    return clues;\n  }  \n\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n  \n    let clue = 'Your treasure lies';\n  \n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n  \n    return clue;\n  }\n\n  function generateLanguageClue(country) {\n    const languageCodes = country.languages ? Object.keys(country.languages) : [];\n    if (languageCodes.length === 0) return null;\n\n    // Map of language codes to families or scripts\n    const languageFamilies = {\n      'ara': 'Semitic',\n      'zho': 'Sino-Tibetan',\n      'hin': 'Indo-Aryan',\n      'ben': 'Indo-Aryan',\n      'rus': 'Slavic',\n      'jpn': 'Japonic',\n      'deu': 'Germanic',\n      'fra': 'Romance',\n      'spa': 'Romance',\n      'eng': 'Germanic',\n      'por': 'Romance',\n      'ita': 'Romance',\n      'kor': 'Koreanic',\n      'tur': 'Turkic',\n      'vie': 'Austroasiatic',\n      'tam': 'Dravidian',\n      'urd': 'Indo-Aryan',\n      'grn': 'Tupian',\n      'amh': 'Afro-Asiatic',\n      // Add more language code mappings as needed\n    };\n\n    const scripts = {\n      'Arab': 'abjad script',\n      'Cyrl': 'Cyrillic script',\n      'Hans': 'simplified Chinese characters',\n      'Hant': 'traditional Chinese characters',\n      'Latn': 'Latin script',\n      'Deva': 'Devanagari script',\n      'Beng': 'Bengali script',\n      'Jpan': 'Japanese script',\n      'Kore': 'Hangul script',\n      // Add more script mappings as needed\n    };\n\n    // Get the first language code\n    const langCode = languageCodes[0];\n    const family = languageFamilies[langCode];\n    const script = scripts[country.languages[langCode]];\n\n    let clue = 'The local tongue ';\n    if (family) {\n      clue += `traces back to the ${family} language family`;\n    } else {\n      clue += 'has ancient roots';\n    }\n\n    if (script) {\n      clue += `, written in the ${script}`;\n    }\n\n    clue += '.';\n\n    return clue;\n  }\n\n  function getFlagColors(flagUrl) {\n    // Placeholder colors\n    return ['red', 'white', 'blue'];\n  }\n\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValue.trim().toUpperCase();\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValue(''); // Clear the input field\n  \n    if (userAnswer === currentChallenge.answer.toUpperCase()) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n  \n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }  \n\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(\n      (location) => location.city_ascii.toUpperCase() === userAnswer.toUpperCase()\n    );\n  \n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n  \n    const guessedLatLng = [parseFloat(guessedLocation.lat), parseFloat(guessedLocation.lng)];\n    const actualLatLng = [parseFloat(currentChallenge.location.lat), parseFloat(currentChallenge.location.lng)];\n  \n    const latDifference = actualLatLng[0] - guessedLatLng[0];\n    const lngDifference = actualLatLng[1] - guessedLatLng[1];\n  \n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n  \n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }  \n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = (guess.toUpperCase() === currentChallenge.answer.toUpperCase());\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }  \n\n  function shareChallenge() {\n    const url = window.location.href;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n\n  if (!currentChallenge) {\n    return <div>Loading...</div>;\n  }\n  \n\n  return (\n    <div className=\"today-challenge\">\n      <h2>{`Challenge No. ${challengeNumber}`}</h2>\n      <h4>{currentChallenge.date}</h4>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues text-center\">\n        <h3>🗺️ Clues:</h3>\n        <ol className=\"list-unstyled\">\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ol>\n      </div>\n      <div className=\"answer-boxes\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyDown={(e) => e.key === 'Enter' && handleSubmit()}\n          disabled={gameEnded}\n          className=\"form-control\"\n          placeholder=\"Enter city name\"\n          autoFocus\n        />\n      </div>\n      <button className=\"btn btn-primary\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      <div className=\"guess-history\">\n        <h4>Your Guesses:</h4>\n        <ul>\n          {guessHistory.map((guess, index) => (\n            <li key={index}>{guess}</li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight EST!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n          <button className=\"btn btn-secondary ml-2\" onClick={shareChallenge}>Share This Challenge</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Challenge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}