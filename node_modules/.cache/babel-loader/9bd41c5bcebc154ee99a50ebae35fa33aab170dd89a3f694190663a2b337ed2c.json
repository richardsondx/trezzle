{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constants.js'; // Use named import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValues(state.inputValues);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n      inputRefs.current = [];\n    }\n  }, [challengeNumber]);\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([new Promise(resolve => {\n      Papa.parse('/worldcities.csv', {\n        download: true,\n        header: true,\n        complete: function (results) {\n          const cities = results.data;\n          const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n          setLocations(validCities);\n          resolve();\n        }\n      });\n    }), axios.get('https://restcountries.com/v3.1/all').then(response => {\n      setCountries(response.data);\n    })]).then(() => {\n      initializeGame();\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame() {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locations, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + (challengeNumber - 1) * 24 * 60 * 60 * 1000);\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n\n    // Find the country data\n    const countryName = location.country;\n    const country = countries.find(c => c.name.common.toLowerCase() === countryName.toLowerCase());\n    const clues = generateClues(location, country);\n    return {\n      level: level,\n      answer: location.city_ascii,\n      // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`\n    };\n  }\n  function generateClues(location, country) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country && country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push('The land you seek stands alone with no neighboring countries.');\n    }\n\n    // Clue 4: Flag colors or symbols\n    const colors = getFlagColors(country);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    } else {\n      clues.push('The flag bears unique symbols known to the locals.');\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n    return clues;\n  }\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n    let clue = 'Your treasure lies';\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n    return clue;\n  }\n  function getFlagColors(country) {\n    if (!country || !country.flags || !country.flags.svg) return [];\n    // This is a placeholder. You'd need a way to extract colors from the flag image.\n    // For the purpose of this example, we'll use hardcoded values.\n    // In a real application, consider using an API or a package to get flag colors.\n    const flagColors = {\n      'United States': ['red', 'white', 'blue'],\n      'Canada': ['red', 'white']\n      // Add more countries as needed\n    };\n    return flagColors[country.name.common] || [];\n  }\n  function generateLanguageClue(country) {\n    if (!country || !country.languages) return null;\n    const languages = Object.values(country.languages);\n    if (languages.length === 0) return null;\n    const language = languages[0]; // Taking the first language\n    return `The local tongue traces back to the ${language} language family.`;\n  }\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z\\s'’-]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      e.preventDefault();\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase().replace(/\\s/g, '');\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/\\s/g, '');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(currentChallenge.answer.length).fill('')); // Clear the input fields\n\n    if (userAnswer === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(location => location.city_ascii.toUpperCase().replace(/\\s/g, '') === userAnswer);\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase().replace(/\\s/g, '') === currentChallenge.answer.toUpperCase().replace(/\\s/g, '');\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  if (!currentChallenge) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Challenge No. ${challengeNumber}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"list-unstyled\",\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-boxes\",\n      children: currentChallenge.answer.split('').map((char, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValues[index] || '',\n        onChange: e => handleInputChange(e, index),\n        onKeyDown: e => handleKeyDown(e, index),\n        ref: el => inputRefs.current[index] = el,\n        disabled: gameEnded,\n        className: \"letter-input\",\n        autoFocus: index === 0\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-2\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), guessHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: guessHistory.map((guess, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: guess\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight EST!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary ml-2\",\n        onClick: shareChallenge,\n        children: \"Share This Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n}\n_s(Challenge, \"ZDyEEICQoH0rWN3NML4cmyuW4Qk=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","axios","useParams","START_DATE","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","locations","setLocations","countries","setCountries","currentChallenge","setCurrentChallenge","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","guessHistory","setGuessHistory","inputValues","setInputValues","inputRefs","savedState","localStorage","getItem","state","JSON","parse","current","setItem","stringify","Promise","all","resolve","download","header","complete","results","cities","data","validCities","filter","city","city_ascii","lat","lng","population","get","then","response","initializeGame","seed","calculateSeedFromNumber","challenge","generateChallenge","Array","answer","length","fill","level","startDate","Date","seedDate","getTime","getFullYear","getMonth","getDate","locationData","levels","parseInt","levelKeys","Object","keys","levelIndex","locationsInLevel","locationIndex","location","countryName","country","find","c","name","common","toLowerCase","clues","generateClues","fact","Math","random","parseFloat","latDirection","push","abs","toFixed","lngDirection","compassClue","generateCompassClue","borders","colors","getFlagColors","join","languageClue","generateLanguageClue","clue","flags","svg","flagColors","languages","values","language","handleInputChange","e","index","value","target","toUpperCase","test","newInputValues","focus","handleKeyDown","key","preventDefault","handleSubmit","userAnswer","trim","replace","correctAnswer","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedLocation","guessedLat","guessedLng","actualLat","actualLng","latDifference","lngDifference","copyResult","result","forEach","guess","isCorrect","status","navigator","clipboard","writeText","alert","shareChallenge","url","window","origin","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","split","char","type","onChange","onKeyDown","ref","el","disabled","autoFocus","onClick","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constants.js'; // Use named import\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValues(state.inputValues);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n      inputRefs.current = [];\n    }\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory,\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([\n      new Promise((resolve) => {\n        Papa.parse('/worldcities.csv', {\n          download: true,\n          header: true,\n          complete: function (results) {\n            const cities = results.data;\n            const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n            setLocations(validCities);\n            resolve();\n          },\n        });\n      }),\n      axios.get('https://restcountries.com/v3.1/all').then(response => {\n        setCountries(response.data);\n      }),\n    ]).then(() => {\n      initializeGame();\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame() {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locations, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + ((challengeNumber - 1) * 24 * 60 * 60 * 1000));\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000),\n    };\n\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n\n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n\n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n\n    // Find the country data\n    const countryName = location.country;\n    const country = countries.find(c => c.name.common.toLowerCase() === countryName.toLowerCase());\n\n    const clues = generateClues(location, country);\n\n    return {\n      level: level,\n      answer: location.city_ascii, // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`,\n    };\n  }\n\n  function generateClues(location, country) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country && country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push('The land you seek stands alone with no neighboring countries.');\n    }\n\n    // Clue 4: Flag colors or symbols\n    const colors = getFlagColors(country);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    } else {\n      clues.push('The flag bears unique symbols known to the locals.');\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n\n    return clues;\n  }\n\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n\n    let clue = 'Your treasure lies';\n\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n\n    return clue;\n  }\n\n  function getFlagColors(country) {\n    if (!country || !country.flags || !country.flags.svg) return [];\n    // This is a placeholder. You'd need a way to extract colors from the flag image.\n    // For the purpose of this example, we'll use hardcoded values.\n    // In a real application, consider using an API or a package to get flag colors.\n    const flagColors = {\n      'United States': ['red', 'white', 'blue'],\n      'Canada': ['red', 'white'],\n      // Add more countries as needed\n    };\n    return flagColors[country.name.common] || [];\n  }\n\n  function generateLanguageClue(country) {\n    if (!country || !country.languages) return null;\n    const languages = Object.values(country.languages);\n    if (languages.length === 0) return null;\n\n    const language = languages[0]; // Taking the first language\n    return `The local tongue traces back to the ${language} language family.`;\n  }\n\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z\\s'’-]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      e.preventDefault();\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase().replace(/\\s/g, '');\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/\\s/g, '');\n\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(currentChallenge.answer.length).fill('')); // Clear the input fields\n\n    if (userAnswer === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(\n      (location) => location.city_ascii.toUpperCase().replace(/\\s/g, '') === userAnswer\n    );\n\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase().replace(/\\s/g, '') === currentChallenge.answer.toUpperCase().replace(/\\s/g, '');\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n\n  if (!currentChallenge) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"today-challenge\">\n      <h2>{`Challenge No. ${challengeNumber}`}</h2>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues text-center\">\n        <h3>🗺️ Clues:</h3>\n        <ol className=\"list-unstyled\">\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ol>\n      </div>\n      <div className=\"answer-boxes\">\n        {currentChallenge.answer.split('').map((char, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            value={inputValues[index] || ''}\n            onChange={(e) => handleInputChange(e, index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            ref={(el) => (inputRefs.current[index] = el)}\n            disabled={gameEnded}\n            className=\"letter-input\"\n            autoFocus={index === 0}\n          />\n        ))}\n      </div>\n      <button className=\"btn btn-primary mt-2\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      {guessHistory.length > 0 && (\n        <div className=\"guess-history\">\n          <h4>Your Guesses:</h4>\n          <ul>\n            {guessHistory.map((guess, index) => (\n              <li key={index}>{guess}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight EST!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n          <button className=\"btn btn-secondary ml-2\" onClick={shareChallenge}>Share This Challenge</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Challenge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}