{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { useParams } from 'react-router-dom';\nimport START_DATE from '../constant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValue(state.inputValue);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n    }\n  }, [challengeNumber]);\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValue,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValue, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch and parse the CSV file\n  useEffect(() => {\n    Papa.parse('/worldcities.csv', {\n      download: true,\n      header: true,\n      complete: function (results) {\n        const cities = results.data;\n        const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n        setLocations(validCities);\n        initializeGame(validCities);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + (challengeNumber - 1) * 24 * 60 * 60 * 1000);\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n    const clues = generateClues(location);\n    return {\n      level: level,\n      answer: location.city_ascii,\n      // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`\n    };\n  }\n  function generateClues(location) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country.borders && country.borders.length > 0) {\n      clues.push(`\"You'll pass by ${country.borders.length} neighboring lands on your journey.\"`);\n    } else {\n      clues.push(`\"The land you seek stands alone with no neighboring countries.\"`);\n    }\n\n    // Clue 4: Alternate between Flag colors and Compass Clue\n    if (Math.random() < 0.5) {\n      // Compass Clue\n      const regionHint = generateCompassClue(country);\n      clues.push(regionHint);\n    } else {\n      // Flag colors\n      const colors = getFlagColors(country.flags.png);\n      if (colors.length > 0) {\n        clues.push(`\"Hoist the flag with colors of ${colors.join(', ')}.\"`);\n      }\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n    const randomFeature = features[Math.floor(Math.random() * features.length)];\n    clues.push(`You'll traverse ${randomFeature} on your journey.`);\n    return clues;\n  }\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n    let clue = 'Your treasure lies';\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n    return clue;\n  }\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase();\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/\\s/g, '');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(currentChallenge.answer.length).fill('')); // Clear the input fields\n\n    if (userAnswer === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(location => location.city_ascii.toUpperCase() === userAnswer.toUpperCase());\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase() === currentChallenge.answer.toUpperCase();\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z\\s'’-]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n  if (!currentChallenge) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Challenge No. ${challengeNumber}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: currentChallenge.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"list-unstyled\",\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-boxes\",\n      children: currentChallenge.answer.split('').map((char, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValues[index] || '',\n        onChange: e => handleInputChange(e, index),\n        onKeyDown: e => handleKeyDown(e, index),\n        ref: el => inputRefs.current[index] = el,\n        disabled: gameEnded,\n        className: \"letter-input\",\n        autoFocus: index === 0\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-2\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), guessHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: guessHistory.map((guess, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: guess\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight EST!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary ml-2\",\n        onClick: shareChallenge,\n        children: \"Share This Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(Challenge, \"XWGgO1LD3+wEpwZYSuOlvaMIfbk=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","useParams","START_DATE","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","locations","setLocations","currentChallenge","setCurrentChallenge","inputValue","setInputValue","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","guessHistory","setGuessHistory","inputValues","setInputValues","inputRefs","savedState","localStorage","getItem","state","JSON","parse","setItem","stringify","download","header","complete","results","cities","data","validCities","filter","city","city_ascii","lat","lng","population","initializeGame","locationData","seed","calculateSeedFromNumber","challenge","generateChallenge","Array","answer","length","fill","level","current","startDate","Date","seedDate","getTime","getFullYear","getMonth","getDate","levels","parseInt","levelKeys","Object","keys","levelIndex","locationsInLevel","locationIndex","location","clues","generateClues","fact","country","Math","random","parseFloat","latDirection","push","abs","toFixed","lngDirection","compassClue","generateCompassClue","borders","regionHint","colors","getFlagColors","flags","png","join","languageClue","generateLanguageClue","randomFeature","features","floor","clue","handleSubmit","userAnswer","trim","toUpperCase","correctAnswer","replace","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedLocation","find","guessedLat","guessedLng","actualLat","actualLng","latDifference","lngDifference","copyResult","result","forEach","guess","index","isCorrect","status","navigator","clipboard","writeText","alert","shareChallenge","url","window","origin","handleInputChange","e","value","target","test","newInputValues","focus","handleKeyDown","key","children","fileName","_jsxFileName","lineNumber","columnNumber","className","date","map","split","char","type","onChange","onKeyDown","ref","el","disabled","autoFocus","onClick","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { useParams } from 'react-router-dom';\nimport START_DATE from '../constant.js'\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValue(state.inputValue);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n    }\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValue,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory,\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValue, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n  \n  // Fetch and parse the CSV file\n  useEffect(() => {\n    Papa.parse('/worldcities.csv', {\n      download: true,\n      header: true,\n      complete: function (results) {\n        const cities = results.data;\n        const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n        setLocations(validCities);\n        initializeGame(validCities);\n      },\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n  \n\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + ((challengeNumber - 1) * 24 * 60 * 60 * 1000));\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n\n  function generateChallenge(locationData, seed) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000),\n    };\n\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n\n    const locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n\n    while (!location.lat || !location.lng) {\n      location = locationsInLevel[(locationIndex + 1) % locationsInLevel.length];\n    }\n\n    const clues = generateClues(location);\n\n    return {\n      level: level,\n      answer: location.city_ascii, // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`,\n    };\n  }\n\n  function generateClues(location) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country.borders && country.borders.length > 0) {\n      clues.push(`\"You'll pass by ${country.borders.length} neighboring lands on your journey.\"`);\n    } else {\n      clues.push(`\"The land you seek stands alone with no neighboring countries.\"`);\n    }\n\n    // Clue 4: Alternate between Flag colors and Compass Clue\n    if (Math.random() < 0.5) {\n      // Compass Clue\n      const regionHint = generateCompassClue(country);\n      clues.push(regionHint);\n    } else {\n      // Flag colors\n      const colors = getFlagColors(country.flags.png);\n      if (colors.length > 0) {\n        clues.push(`\"Hoist the flag with colors of ${colors.join(', ')}.\"`);\n      }\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n\n    const randomFeature = features[Math.floor(Math.random() * features.length)];\n    clues.push(`You'll traverse ${randomFeature} on your journey.`);\n\n    return clues;\n  }\n\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n\n    let clue = 'Your treasure lies';\n\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n\n    return clue;\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase();\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/\\s/g, '');\n  \n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(currentChallenge.answer.length).fill('')); // Clear the input fields\n  \n    if (userAnswer === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n  \n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }  \n\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(\n      (location) => location.city_ascii.toUpperCase() === userAnswer.toUpperCase()\n    );\n\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase() === currentChallenge.answer.toUpperCase();\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z\\s'’-]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n  \n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n  \n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n  \n\n  if (!currentChallenge) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"today-challenge\">\n      <h2>{`Challenge No. ${challengeNumber}`}</h2>\n      <h4>{currentChallenge.date}</h4>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues text-center\">\n        <h3>🗺️ Clues:</h3>\n        <ol className=\"list-unstyled\">\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ol>\n      </div>\n      <div className=\"answer-boxes\">\n        {currentChallenge.answer.split('').map((char, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            value={inputValues[index] || ''}\n            onChange={(e) => handleInputChange(e, index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            ref={(el) => (inputRefs.current[index] = el)}\n            disabled={gameEnded}\n            className=\"letter-input\"\n            autoFocus={index === 0}\n          />\n        ))}\n      </div>\n      <button className=\"btn btn-primary mt-2\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      {guessHistory.length > 0 && (\n        <div className=\"guess-history\">\n          <h4>Your Guesses:</h4>\n          <ul>\n            {guessHistory.map((guess, index) => (\n              <li key={index}>{guess}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight EST!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n          <button className=\"btn btn-secondary ml-2\" onClick={shareChallenge}>Share This Challenge</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Challenge;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,UAAU,MAAM,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,SAASA,CAAC;EAAEC;AAAoB,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM;IAAEC;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC9B,MAAMQ,eAAe,GAAGH,mBAAmB,IAAII,MAAM,CAACF,MAAM,CAAC;EAC7D,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,MAAM,CAAC;EACpD,MAAM,CAAC4B,YAAY,EAAEC,eAAe,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC8B,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMgC,SAAS,GAAG9B,MAAM,CAAC,EAAE,CAAC;EAE5BD,SAAS,CAAC,MAAM;IACd,MAAMgC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,sBAAsBvB,eAAe,EAAE,CAAC;IAChF,IAAIqB,UAAU,EAAE;MACd,MAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;MACpChB,mBAAmB,CAACmB,KAAK,CAACpB,gBAAgB,CAAC;MAC3CG,aAAa,CAACiB,KAAK,CAAClB,UAAU,CAAC;MAC/BG,YAAY,CAACe,KAAK,CAAChB,SAAS,CAAC;MAC7BG,UAAU,CAACa,KAAK,CAACd,OAAO,CAAC;MACzBG,YAAY,CAACW,KAAK,CAACZ,SAAS,CAAC;MAC7BG,aAAa,CAACS,KAAK,CAACV,UAAU,CAAC;MAC/BG,eAAe,CAACO,KAAK,CAACR,YAAY,CAAC;IACrC;EACF,CAAC,EAAE,CAAChB,eAAe,CAAC,CAAC;EAErBX,SAAS,CAAC,MAAM;IACd,IAAIe,gBAAgB,EAAE;MACpB,MAAMoB,KAAK,GAAG;QACZpB,gBAAgB;QAChBE,UAAU;QACVE,SAAS;QACTE,OAAO;QACPE,SAAS;QACTE,UAAU;QACVE;MACF,CAAC;MACDM,YAAY,CAACK,OAAO,CAAC,sBAAsB3B,eAAe,EAAE,EAAEyB,IAAI,CAACG,SAAS,CAACJ,KAAK,CAAC,CAAC;IACtF;EACF,CAAC,EAAE,CAACpB,gBAAgB,EAAEE,UAAU,EAAEE,SAAS,EAAEE,OAAO,EAAEE,SAAS,EAAEE,UAAU,EAAEE,YAAY,EAAEhB,eAAe,CAAC,CAAC;;EAE5G;EACAX,SAAS,CAAC,MAAM;IACdE,IAAI,CAACmC,KAAK,CAAC,kBAAkB,EAAE;MAC7BG,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE,SAAAA,CAAUC,OAAO,EAAE;QAC3B,MAAMC,MAAM,GAAGD,OAAO,CAACE,IAAI;QAC3B,MAAMC,WAAW,GAAGF,MAAM,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,UAAU,IAAID,IAAI,CAACE,GAAG,IAAIF,IAAI,CAACG,GAAG,IAAIH,IAAI,CAACI,UAAU,CAAC;QACrGtC,YAAY,CAACgC,WAAW,CAAC;QACzBO,cAAc,CAACP,WAAW,CAAC;MAC7B;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACnC,eAAe,CAAC,CAAC;;EAErB;EACA,SAAS0C,cAAcA,CAACC,YAAY,EAAE;IACpC,MAAMC,IAAI,GAAGC,uBAAuB,CAAC7C,eAAe,CAAC;IACrD,MAAM8C,SAAS,GAAGC,iBAAiB,CAACJ,YAAY,EAAEC,IAAI,CAAC;IACvDvC,mBAAmB,CAACyC,SAAS,CAAC;IAC9B3B,cAAc,CAAC6B,KAAK,CAACF,SAAS,CAACG,MAAM,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;IACvD1C,YAAY,CAAC,CAAC,CAAC;IACfE,UAAU,CAAC,EAAE,CAAC;IACdE,YAAY,CAAC,KAAK,CAAC;IACnBE,aAAa,CAAC+B,SAAS,CAACM,KAAK,CAAC;IAC9BnC,eAAe,CAAC,EAAE,CAAC;IACnBG,SAAS,CAACiC,OAAO,GAAG,EAAE;EACxB;EAGA,SAASR,uBAAuBA,CAAC7C,eAAe,EAAE;IAChD,MAAMsD,SAAS,GAAG,IAAIC,IAAI,CAAC9D,UAAU,CAAC;IACtC,MAAM+D,QAAQ,GAAG,IAAID,IAAI,CAACD,SAAS,CAACG,OAAO,CAAC,CAAC,GAAI,CAACzD,eAAe,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK,CAAC;IAC9F,MAAM4C,IAAI,GAAGY,QAAQ,CAACE,WAAW,CAAC,CAAC,GAAG,KAAK,GAAG,CAACF,QAAQ,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,GAAGH,QAAQ,CAACI,OAAO,CAAC,CAAC;IAClG,OAAOhB,IAAI;EACb;EAEA,SAASG,iBAAiBA,CAACJ,YAAY,EAAEC,IAAI,EAAE;IAC7C,MAAMiB,MAAM,GAAG;MACb,MAAM,EAAElB,YAAY,CAACP,MAAM,CAACC,IAAI,IAAIyB,QAAQ,CAACzB,IAAI,CAACI,UAAU,CAAC,GAAG,OAAO,CAAC;MACxE,QAAQ,EAAEE,YAAY,CAACP,MAAM,CAACC,IAAI,IAAIyB,QAAQ,CAACzB,IAAI,CAACI,UAAU,CAAC,IAAI,OAAO,IAAIqB,QAAQ,CAACzB,IAAI,CAACI,UAAU,CAAC,GAAG,OAAO,CAAC;MAClH,MAAM,EAAEE,YAAY,CAACP,MAAM,CAACC,IAAI,IAAIyB,QAAQ,CAACzB,IAAI,CAACI,UAAU,CAAC,IAAI,OAAO;IAC1E,CAAC;IAED,MAAMsB,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC;IACrC,MAAMK,UAAU,GAAGtB,IAAI,GAAGmB,SAAS,CAACb,MAAM;IAC1C,MAAME,KAAK,GAAGW,SAAS,CAACG,UAAU,CAAC;IACnC,MAAMC,gBAAgB,GAAGN,MAAM,CAACT,KAAK,CAAC;IAEtC,MAAMgB,aAAa,GAAGxB,IAAI,GAAGuB,gBAAgB,CAACjB,MAAM;IACpD,IAAImB,QAAQ,GAAGF,gBAAgB,CAACC,aAAa,CAAC;IAE9C,OAAO,CAACC,QAAQ,CAAC9B,GAAG,IAAI,CAAC8B,QAAQ,CAAC7B,GAAG,EAAE;MACrC6B,QAAQ,GAAGF,gBAAgB,CAAC,CAACC,aAAa,GAAG,CAAC,IAAID,gBAAgB,CAACjB,MAAM,CAAC;IAC5E;IAEA,MAAMoB,KAAK,GAAGC,aAAa,CAACF,QAAQ,CAAC;IAErC,OAAO;MACLjB,KAAK,EAAEA,KAAK;MACZH,MAAM,EAAEoB,QAAQ,CAAC/B,UAAU;MAAE;MAC7B+B,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZE,IAAI,EAAE,eAAeH,QAAQ,CAAC/B,UAAU,kBAAkB+B,QAAQ,CAACI,OAAO;IAC5E,CAAC;EACH;EAEA,SAASF,aAAaA,CAACF,QAAQ,EAAE;IAC/B,MAAMC,KAAK,GAAG,EAAE;;IAEhB;IACA,IAAII,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;MACvB;MACA,MAAMpC,GAAG,GAAGqC,UAAU,CAACP,QAAQ,CAAC9B,GAAG,CAAC;MACpC,MAAMsC,YAAY,GAAGtC,GAAG,IAAI,CAAC,GAAG,OAAO,GAAG,OAAO;MACjD+B,KAAK,CAACQ,IAAI,CAAC,eAAeJ,IAAI,CAACK,GAAG,CAACxC,GAAG,CAAC,CAACyC,OAAO,CAAC,CAAC,CAAC,KAAKH,YAAY,GAAG,CAAC;IACzE,CAAC,MAAM;MACL;MACA,MAAMrC,GAAG,GAAGoC,UAAU,CAACP,QAAQ,CAAC7B,GAAG,CAAC;MACpC,MAAMyC,YAAY,GAAGzC,GAAG,IAAI,CAAC,GAAG,MAAM,GAAG,MAAM;MAC/C8B,KAAK,CAACQ,IAAI,CAAC,gBAAgBJ,IAAI,CAACK,GAAG,CAACvC,GAAG,CAAC,CAACwC,OAAO,CAAC,CAAC,CAAC,KAAKC,YAAY,GAAG,CAAC;IAC1E;;IAEA;IACA,MAAMC,WAAW,GAAGC,mBAAmB,CAACd,QAAQ,CAAC;IACjDC,KAAK,CAACQ,IAAI,CAACI,WAAW,CAAC;;IAEvB;IACA,IAAIT,OAAO,CAACW,OAAO,IAAIX,OAAO,CAACW,OAAO,CAAClC,MAAM,GAAG,CAAC,EAAE;MACjDoB,KAAK,CAACQ,IAAI,CAAC,mBAAmBL,OAAO,CAACW,OAAO,CAAClC,MAAM,sCAAsC,CAAC;IAC7F,CAAC,MAAM;MACLoB,KAAK,CAACQ,IAAI,CAAC,iEAAiE,CAAC;IAC/E;;IAEA;IACA,IAAIJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;MACvB;MACA,MAAMU,UAAU,GAAGF,mBAAmB,CAACV,OAAO,CAAC;MAC/CH,KAAK,CAACQ,IAAI,CAACO,UAAU,CAAC;IACxB,CAAC,MAAM;MACL;MACA,MAAMC,MAAM,GAAGC,aAAa,CAACd,OAAO,CAACe,KAAK,CAACC,GAAG,CAAC;MAC/C,IAAIH,MAAM,CAACpC,MAAM,GAAG,CAAC,EAAE;QACrBoB,KAAK,CAACQ,IAAI,CAAC,kCAAkCQ,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MACrE;IACF;;IAEA;IACA,MAAMC,YAAY,GAAGC,oBAAoB,CAACnB,OAAO,CAAC;IAClD,IAAIkB,YAAY,EAAE;MAChBrB,KAAK,CAACQ,IAAI,CAACa,YAAY,CAAC;IAC1B;IAEA,MAAME,aAAa,GAAGC,QAAQ,CAACpB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGmB,QAAQ,CAAC5C,MAAM,CAAC,CAAC;IAC3EoB,KAAK,CAACQ,IAAI,CAAC,mBAAmBe,aAAa,mBAAmB,CAAC;IAE/D,OAAOvB,KAAK;EACd;EAEA,SAASa,mBAAmBA,CAACd,QAAQ,EAAE;IACrC,MAAM9B,GAAG,GAAGqC,UAAU,CAACP,QAAQ,CAAC9B,GAAG,CAAC;IACpC,MAAMC,GAAG,GAAGoC,UAAU,CAACP,QAAQ,CAAC7B,GAAG,CAAC;IAEpC,IAAIwD,IAAI,GAAG,oBAAoB;IAE/B,IAAIzD,GAAG,IAAI,EAAE,EAAE;MACbyD,IAAI,IAAI,+BAA+B;IACzC,CAAC,MAAM,IAAIzD,GAAG,IAAI,CAAC,EAAE,EAAE;MACrByD,IAAI,IAAI,6BAA6B;IACvC,CAAC,MAAM,IAAIxD,GAAG,IAAI,EAAE,IAAIA,GAAG,IAAI,CAAC,EAAE,EAAE;MAClCwD,IAAI,IAAI,2BAA2B;IACrC,CAAC,MAAM;MACLA,IAAI,IAAI,oCAAoC;IAC9C;IAEA,OAAOA,IAAI;EACb;EAEA,SAASC,YAAYA,CAAA,EAAG;IACtB,MAAMC,UAAU,GAAGhF,WAAW,CAACwE,IAAI,CAAC,EAAE,CAAC,CAACS,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC5D,MAAMC,aAAa,GAAGjG,gBAAgB,CAAC6C,MAAM,CAACmD,WAAW,CAAC,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAE9E,MAAMC,eAAe,GAAG,CAAC,GAAGvF,YAAY,EAAEkF,UAAU,CAAC;IACrDjF,eAAe,CAACsF,eAAe,CAAC;IAChCpF,cAAc,CAAC6B,KAAK,CAAC5C,gBAAgB,CAAC6C,MAAM,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAEhE,IAAI+C,UAAU,KAAKG,aAAa,EAAE;MAChC;MACA1F,UAAU,CAAC,GAAGP,gBAAgB,CAACoE,IAAI,EAAE,CAAC;MACtC3D,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,MAAM;MACL;MACA,MAAM2F,YAAY,GAAGhG,SAAS,GAAG,CAAC;MAClCC,YAAY,CAAC+F,YAAY,CAAC;MAE1B,MAAMC,aAAa,GAAGC,gBAAgB,CAACR,UAAU,CAAC;MAClD,IAAIM,YAAY,GAAG,CAAC,EAAE;QACpB7F,UAAU,CAAC,cAAc8F,aAAa,gBAAgBD,YAAY,EAAE,CAAC;MACvE,CAAC,MAAM;QACL7F,UAAU,CAAC,gCAAgCP,gBAAgB,CAAC6C,MAAM,GAAG,CAAC;QACtEpC,YAAY,CAAC,IAAI,CAAC;MACpB;IACF;EACF;EAEA,SAAS6F,gBAAgBA,CAACR,UAAU,EAAE;IACpC,MAAMS,eAAe,GAAGzG,SAAS,CAAC0G,IAAI,CACnCvC,QAAQ,IAAKA,QAAQ,CAAC/B,UAAU,CAAC8D,WAAW,CAAC,CAAC,KAAKF,UAAU,CAACE,WAAW,CAAC,CAC7E,CAAC;IAED,IAAI,CAACO,eAAe,IAAI,CAACvG,gBAAgB,CAACiE,QAAQ,EAAE;MAClD,OAAO,oCAAoC;IAC7C;IAEA,MAAMwC,UAAU,GAAGjC,UAAU,CAAC+B,eAAe,CAACpE,GAAG,CAAC;IAClD,MAAMuE,UAAU,GAAGlC,UAAU,CAAC+B,eAAe,CAACnE,GAAG,CAAC;IAClD,MAAMuE,SAAS,GAAGnC,UAAU,CAACxE,gBAAgB,CAACiE,QAAQ,CAAC9B,GAAG,CAAC;IAC3D,MAAMyE,SAAS,GAAGpC,UAAU,CAACxE,gBAAgB,CAACiE,QAAQ,CAAC7B,GAAG,CAAC;IAE3D,MAAMyE,aAAa,GAAGF,SAAS,GAAGF,UAAU;IAC5C,MAAMK,aAAa,GAAGF,SAAS,GAAGF,UAAU;IAE5C,MAAMjC,YAAY,GAAGoC,aAAa,GAAG,CAAC,GAAG,OAAO,GAAG,OAAO;IAC1D,MAAMhC,YAAY,GAAGiC,aAAa,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;IAExD,OAAO,kCAAkCxC,IAAI,CAACK,GAAG,CAACkC,aAAa,CAAC,CAACjC,OAAO,CAAC,CAAC,CAAC,KAAKH,YAAY,QAAQH,IAAI,CAACK,GAAG,CAACmC,aAAa,CAAC,CAAClC,OAAO,CAAC,CAAC,CAAC,KAAKC,YAAY,GAAG;EAC5J;EAEA,SAASkC,UAAUA,CAAA,EAAG;IACpB,IAAIC,MAAM,GAAG,aAAapH,eAAe,IAAIgB,YAAY,CAACkC,MAAM,QAAQ;IACxElC,YAAY,CAACqG,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACrC,MAAMC,SAAS,GAAGF,KAAK,CAAClB,WAAW,CAAC,CAAC,KAAKhG,gBAAgB,CAAC6C,MAAM,CAACmD,WAAW,CAAC,CAAC;MAC/E,MAAMqB,MAAM,GAAGD,SAAS,GAAG,IAAI,GAAG,IAAI;MACtCJ,MAAM,IAAI,GAAGG,KAAK,GAAG,CAAC,KAAKD,KAAK,IAAIG,MAAM,IAAI;IAChD,CAAC,CAAC;IACFC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACR,MAAM,CAAC;IACrCS,KAAK,CAAC,6BAA6B,CAAC;EACtC;EAEA,SAASC,cAAcA,CAAA,EAAG;IACxB,MAAMC,GAAG,GAAG,GAAGC,MAAM,CAAC3D,QAAQ,CAAC4D,MAAM,cAAcjI,eAAe,EAAE;IACpE0H,SAAS,CAACC,SAAS,CAACC,SAAS,CAACG,GAAG,CAAC;IAClCF,KAAK,CAAC,oCAAoC,CAAC;EAC7C;EACA,SAASK,iBAAiBA,CAACC,CAAC,EAAEZ,KAAK,EAAE;IACnC,MAAMa,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK,CAAChC,WAAW,CAAC,CAAC;IAC1C,IAAI,eAAe,CAACkC,IAAI,CAACF,KAAK,CAAC,EAAE;MAC/B,MAAMG,cAAc,GAAG,CAAC,GAAGrH,WAAW,CAAC;MACvCqH,cAAc,CAAChB,KAAK,CAAC,GAAGa,KAAK;MAC7BjH,cAAc,CAACoH,cAAc,CAAC;;MAE9B;MACA,IAAIH,KAAK,IAAIb,KAAK,GAAGnG,SAAS,CAACiC,OAAO,CAACH,MAAM,GAAG,CAAC,EAAE;QACjD9B,SAAS,CAACiC,OAAO,CAACkE,KAAK,GAAG,CAAC,CAAC,CAACiB,KAAK,CAAC,CAAC;MACtC;IACF;EACF;EAEA,SAASC,aAAaA,CAACN,CAAC,EAAEZ,KAAK,EAAE;IAC/B,IAAIY,CAAC,CAACO,GAAG,KAAK,WAAW,EAAE;MACzB,IAAIxH,WAAW,CAACqG,KAAK,CAAC,EAAE;QACtB,MAAMgB,cAAc,GAAG,CAAC,GAAGrH,WAAW,CAAC;QACvCqH,cAAc,CAAChB,KAAK,CAAC,GAAG,EAAE;QAC1BpG,cAAc,CAACoH,cAAc,CAAC;MAChC,CAAC,MAAM,IAAIhB,KAAK,GAAG,CAAC,EAAE;QACpBnG,SAAS,CAACiC,OAAO,CAACkE,KAAK,GAAG,CAAC,CAAC,CAACiB,KAAK,CAAC,CAAC;MACtC;IACF;EACF;EAGA,IAAI,CAACpI,gBAAgB,EAAE;IACrB,oBAAOT,OAAA;MAAAgJ,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEpJ,OAAA;IAAKqJ,SAAS,EAAC,iBAAiB;IAAAL,QAAA,gBAC9BhJ,OAAA;MAAAgJ,QAAA,EAAK,iBAAiB3I,eAAe;IAAE;MAAA4I,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC7CpJ,OAAA;MAAAgJ,QAAA,EAAKvI,gBAAgB,CAAC6I;IAAI;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChCpJ,OAAA;MAAKqJ,SAAS,EAAC,YAAY;MAAAL,QAAA,GAAC,oBAAkB,eAAAhJ,OAAA;QAAAgJ,QAAA,EAAS7H;MAAU;QAAA8H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACjFpJ,OAAA;MAAKqJ,SAAS,EAAC,mBAAmB;MAAAL,QAAA,gBAChChJ,OAAA;QAAAgJ,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBpJ,OAAA;QAAIqJ,SAAS,EAAC,eAAe;QAAAL,QAAA,EAC1BvI,gBAAgB,CAACkE,KAAK,CAAC4E,GAAG,CAAC,CAAClD,IAAI,EAAEuB,KAAK,kBACtC5H,OAAA;UAAAgJ,QAAA,EAAiB3C;QAAI,GAAZuB,KAAK;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAC3B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACNpJ,OAAA;MAAKqJ,SAAS,EAAC,cAAc;MAAAL,QAAA,EAC1BvI,gBAAgB,CAAC6C,MAAM,CAACkG,KAAK,CAAC,EAAE,CAAC,CAACD,GAAG,CAAC,CAACE,IAAI,EAAE7B,KAAK,kBACjD5H,OAAA;QAEE0J,IAAI,EAAC,MAAM;QACXjB,KAAK,EAAElH,WAAW,CAACqG,KAAK,CAAC,IAAI,EAAG;QAChC+B,QAAQ,EAAGnB,CAAC,IAAKD,iBAAiB,CAACC,CAAC,EAAEZ,KAAK,CAAE;QAC7CgC,SAAS,EAAGpB,CAAC,IAAKM,aAAa,CAACN,CAAC,EAAEZ,KAAK,CAAE;QAC1CiC,GAAG,EAAGC,EAAE,IAAMrI,SAAS,CAACiC,OAAO,CAACkE,KAAK,CAAC,GAAGkC,EAAI;QAC7CC,QAAQ,EAAE9I,SAAU;QACpBoI,SAAS,EAAC,cAAc;QACxBW,SAAS,EAAEpC,KAAK,KAAK;MAAE,GARlBA,KAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNpJ,OAAA;MAAQqJ,SAAS,EAAC,sBAAsB;MAACY,OAAO,EAAE3D,YAAa;MAACyD,QAAQ,EAAE9I,SAAU;MAAA+H,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3GpJ,OAAA;MAAKqJ,SAAS,EAAC,OAAO;MAAAL,QAAA,EACnB3F,KAAK,CAACxC,SAAS,CAAC,CAAC2C,IAAI,CAAC,IAAI,CAAC,CAAC+F,GAAG,CAAC,CAACW,GAAG,EAAEtC,KAAK,kBAC1C5H,OAAA;QAAAgJ,QAAA,EAAmBkB;MAAG,GAAXtC,KAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACL/H,YAAY,CAACkC,MAAM,GAAG,CAAC,iBACtBvD,OAAA;MAAKqJ,SAAS,EAAC,eAAe;MAAAL,QAAA,gBAC5BhJ,OAAA;QAAAgJ,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBpJ,OAAA;QAAAgJ,QAAA,EACG3H,YAAY,CAACkI,GAAG,CAAC,CAAC5B,KAAK,EAAEC,KAAK,kBAC7B5H,OAAA;UAAAgJ,QAAA,EAAiBrB;QAAK,GAAbC,KAAK;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAC5B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN,eACDpJ,OAAA;MAAKqJ,SAAS,EAAC,SAAS;MAAAL,QAAA,EACrBjI,OAAO,iBACNf,OAAA;QAAKqJ,SAAS,EAAC,eAAe;QAAAL,QAAA,GAAC,iCACvB,EAACjI,OAAO;MAAA;QAAAkI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EACLnI,SAAS,iBACRjB,OAAA;MAAAgJ,QAAA,gBACEhJ,OAAA;QAAAgJ,QAAA,EAAG;MAAgD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACvDpJ,OAAA;QAAQqJ,SAAS,EAAC,mBAAmB;QAACY,OAAO,EAAEzC,UAAW;QAAAwB,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrFpJ,OAAA;QAAQqJ,SAAS,EAAC,wBAAwB;QAACY,OAAO,EAAE9B,cAAe;QAAAa,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9F,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACjJ,EAAA,CAjVQF,SAAS;EAAA,QACGJ,SAAS;AAAA;AAAAsK,EAAA,GADrBlK,SAAS;AAmVlB,eAAeA,SAAS;AAAC,IAAAkK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}