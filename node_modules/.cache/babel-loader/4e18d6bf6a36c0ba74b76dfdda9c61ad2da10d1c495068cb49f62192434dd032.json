{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValues, setInputValues] = useState([]);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const inputRefs = useRef([]);\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    // Load city data\n    setLocations(cities);\n    initializeGame(cities);\n  }, [challengeNumber]);\n  useEffect(() => {\n    // Fetch country data\n    axios.get('https://restcountries.com/v3.1/all').then(response => {\n      setCountries(response.data);\n      initializeGame(response.data);\n    }).catch(error => {\n      console.error('Error fetching country data:', error);\n    });\n  }, [challengeNumber]);\n  function initializeGame(countryData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(countryData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date('2022-01-01T00:00:00Z');\n    const seedDate = new Date(startDate.getTime() + (challengeNumber - 1) * 24 * 60 * 60 * 1000);\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n  function generateChallenge(countryData, seed) {\n    // Use seed to generate deterministic challenge\n    const levels = {\n      'Easy': locationData.filter(city => city.population > 5000000),\n      'Medium': locationData.filter(city => city.population <= 5000000 && city.population > 1000000),\n      'Hard': locationData.filter(city => city.population <= 1000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const countriesInLevel = levels[level];\n    const countryIndex = seed % countriesInLevel.length;\n    let country = countriesInLevel[countryIndex];\n    while (!country.capital || !country.borders || !country.languages || !country.latlng) {\n      country = countriesInLevel[(countryIndex + 1) % countriesInLevel.length];\n    }\n    const clues = generateClues(country);\n    return {\n      level: level,\n      answer: country.name.common.toUpperCase(),\n      country: country,\n      clues: clues,\n      fact: `The capital of ${country.name.common} is ${country.capital[0]}.`\n    };\n  }\n  function generateClues(location) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = location.latlng[0];\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = location.latlng[1];\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassDirections = ['north', 'east', 'south', 'west'];\n    const randomDirection = compassDirections[Math.floor(Math.random() * compassDirections.length)];\n    clues.push(`Your treasure lies to the ${randomDirection}.`);\n\n    // Clue 3: Neighboring countries (modified in next point)\n\n    // Clue 4: Flag colors\n    const colors = getFlagColors(location.flagUrl);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(location);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n    return clues;\n  }\n  function generateCompassClue(country) {\n    const region = country.region;\n    const subregion = country.subregion;\n    let clue = 'Your treasure lies';\n    if (region && subregion) {\n      clue += ` in the lands of ${subregion}, within the greater ${region}.`;\n    } else if (region) {\n      clue += ` somewhere in ${region}.`;\n    } else {\n      clue += ' in a faraway land.';\n    }\n    return clue;\n  }\n  function generateLanguageClue(country) {\n    const languageCodes = country.languages ? Object.keys(country.languages) : [];\n    if (languageCodes.length === 0) return null;\n\n    // Map of language codes to families or scripts\n    const languageFamilies = {\n      'ara': 'Semitic',\n      'zho': 'Sino-Tibetan',\n      'hin': 'Indo-Aryan',\n      'ben': 'Indo-Aryan',\n      'rus': 'Slavic',\n      'jpn': 'Japonic',\n      'deu': 'Germanic',\n      'fra': 'Romance',\n      'spa': 'Romance',\n      'eng': 'Germanic',\n      'por': 'Romance',\n      'ita': 'Romance',\n      'kor': 'Koreanic',\n      'tur': 'Turkic',\n      'vie': 'Austroasiatic',\n      'tam': 'Dravidian',\n      'urd': 'Indo-Aryan',\n      'grn': 'Tupian',\n      'amh': 'Afro-Asiatic'\n      // Add more language code mappings as needed\n    };\n    const scripts = {\n      'Arab': 'abjad script',\n      'Cyrl': 'Cyrillic script',\n      'Hans': 'simplified Chinese characters',\n      'Hant': 'traditional Chinese characters',\n      'Latn': 'Latin script',\n      'Deva': 'Devanagari script',\n      'Beng': 'Bengali script',\n      'Jpan': 'Japanese script',\n      'Kore': 'Hangul script'\n      // Add more script mappings as needed\n    };\n\n    // Get the first language code\n    const langCode = languageCodes[0];\n    const family = languageFamilies[langCode];\n    const script = scripts[country.languages[langCode]];\n    let clue = 'The local tongue ';\n    if (family) {\n      clue += `traces back to the ${family} language family`;\n    } else {\n      clue += 'has ancient roots';\n    }\n    if (script) {\n      clue += `, written in the ${script}`;\n    }\n    clue += '.';\n    return clue;\n  }\n  function getFlagColors(flagUrl) {\n    // Placeholder colors\n    return ['red', 'white', 'blue'];\n  }\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n  function handleSubmit() {\n    const userAnswer = inputValues.join('');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    if (userAnswer === currentChallenge.answer) {\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(location => location.name.toUpperCase() === userAnswer.toUpperCase());\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLatLng = guessedLocation.latlng;\n    const actualLatLng = currentChallenge.location.latlng;\n    const latDifference = actualLatLng[0] - guessedLatLng[0];\n    const lngDifference = actualLatLng[1] - guessedLatLng[1];\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess === currentChallenge.answer;\n      const status = isCorrect ? '🟩' : '🟥';\n      const letters = guess.split('').map(letter => `[${letter}]`).join(' ');\n      result += `${index + 1}. ${letters} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n  function shareChallenge() {\n    const url = window.location.href;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  if (!currentChallenge) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Challenge No. ${challengeNumber}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: currentChallenge.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-boxes\",\n      children: inputValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: \"1\",\n        value: value,\n        onChange: e => handleInputChange(e, index),\n        onKeyDown: e => handleKeyDown(e, index),\n        disabled: gameEnded,\n        ref: el => inputRefs.current[index] = el\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight EST!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary ml-2\",\n        onClick: shareChallenge,\n        children: \"Share This Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n}\n_s(Challenge, \"GnVM8LUW9VGwIV7lVNIQgp9bQYo=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useParams","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","countries","setCountries","currentChallenge","setCurrentChallenge","inputValues","setInputValues","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","inputRefs","guessHistory","setGuessHistory","locations","setLocations","cities","initializeGame","get","then","response","data","catch","error","console","countryData","seed","calculateSeedFromNumber","challenge","generateChallenge","Array","answer","length","fill","level","current","startDate","Date","seedDate","getTime","getFullYear","getMonth","getDate","levels","locationData","filter","city","population","levelKeys","Object","keys","levelIndex","countriesInLevel","countryIndex","country","capital","borders","languages","latlng","clues","generateClues","name","common","toUpperCase","fact","location","Math","random","lat","latDirection","push","abs","toFixed","lng","lngDirection","compassDirections","randomDirection","floor","colors","getFlagColors","flagUrl","join","languageClue","generateLanguageClue","generateCompassClue","region","subregion","clue","languageCodes","languageFamilies","scripts","langCode","family","script","handleInputChange","e","index","value","target","test","newInputValues","focus","handleKeyDown","key","handleSubmit","userAnswer","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedLocation","find","guessedLatLng","actualLatLng","latDifference","lngDifference","copyResult","result","forEach","guess","isCorrect","status","letters","split","map","letter","navigator","clipboard","writeText","alert","shareChallenge","url","window","href","children","fileName","_jsxFileName","lineNumber","columnNumber","className","date","type","maxLength","onChange","onKeyDown","disabled","ref","el","onClick","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValues, setInputValues] = useState([]);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const inputRefs = useRef([]);\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [locations, setLocations] = useState([]);\n\n  useEffect(() => {\n    // Load city data\n    setLocations(cities);\n    initializeGame(cities);\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    // Fetch country data\n    axios.get('https://restcountries.com/v3.1/all')\n      .then(response => {\n        setCountries(response.data);\n        initializeGame(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching country data:', error);\n      });\n  }, [challengeNumber]);\n\n  function initializeGame(countryData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(countryData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date('2022-01-01T00:00:00Z');\n    const seedDate = new Date(startDate.getTime() + ((challengeNumber - 1) * 24 * 60 * 60 * 1000));\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n\n  function generateChallenge(countryData, seed) {\n    // Use seed to generate deterministic challenge\n    const levels = {\n      'Easy': locationData.filter(city => city.population > 5000000),\n      'Medium': locationData.filter(city => city.population <= 5000000 && city.population > 1000000),\n      'Hard': locationData.filter(city => city.population <= 1000000),\n    };\n\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const countriesInLevel = levels[level];\n\n    const countryIndex = seed % countriesInLevel.length;\n    let country = countriesInLevel[countryIndex];\n\n    while (!country.capital || !country.borders || !country.languages || !country.latlng) {\n      country = countriesInLevel[(countryIndex + 1) % countriesInLevel.length];\n    }\n\n    const clues = generateClues(country);\n\n    return {\n      level: level,\n      answer: country.name.common.toUpperCase(),\n      country: country,\n      clues: clues,\n      fact: `The capital of ${country.name.common} is ${country.capital[0]}.`,\n    };\n  }\n\n  function generateClues(location) {\n    const clues = [];\n  \n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = location.latlng[0];\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = location.latlng[1];\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n  \n    // Clue 2: Compass clue\n    const compassDirections = ['north', 'east', 'south', 'west'];\n    const randomDirection = compassDirections[Math.floor(Math.random() * compassDirections.length)];\n    clues.push(`Your treasure lies to the ${randomDirection}.`);\n  \n    // Clue 3: Neighboring countries (modified in next point)\n  \n    // Clue 4: Flag colors\n    const colors = getFlagColors(location.flagUrl);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    }\n  \n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(location);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n  \n    return clues;\n  }  \n\n  function generateCompassClue(country) {\n    const region = country.region;\n    const subregion = country.subregion;\n\n    let clue = 'Your treasure lies';\n    if (region && subregion) {\n      clue += ` in the lands of ${subregion}, within the greater ${region}.`;\n    } else if (region) {\n      clue += ` somewhere in ${region}.`;\n    } else {\n      clue += ' in a faraway land.';\n    }\n\n    return clue;\n  }\n\n  function generateLanguageClue(country) {\n    const languageCodes = country.languages ? Object.keys(country.languages) : [];\n    if (languageCodes.length === 0) return null;\n\n    // Map of language codes to families or scripts\n    const languageFamilies = {\n      'ara': 'Semitic',\n      'zho': 'Sino-Tibetan',\n      'hin': 'Indo-Aryan',\n      'ben': 'Indo-Aryan',\n      'rus': 'Slavic',\n      'jpn': 'Japonic',\n      'deu': 'Germanic',\n      'fra': 'Romance',\n      'spa': 'Romance',\n      'eng': 'Germanic',\n      'por': 'Romance',\n      'ita': 'Romance',\n      'kor': 'Koreanic',\n      'tur': 'Turkic',\n      'vie': 'Austroasiatic',\n      'tam': 'Dravidian',\n      'urd': 'Indo-Aryan',\n      'grn': 'Tupian',\n      'amh': 'Afro-Asiatic',\n      // Add more language code mappings as needed\n    };\n\n    const scripts = {\n      'Arab': 'abjad script',\n      'Cyrl': 'Cyrillic script',\n      'Hans': 'simplified Chinese characters',\n      'Hant': 'traditional Chinese characters',\n      'Latn': 'Latin script',\n      'Deva': 'Devanagari script',\n      'Beng': 'Bengali script',\n      'Jpan': 'Japanese script',\n      'Kore': 'Hangul script',\n      // Add more script mappings as needed\n    };\n\n    // Get the first language code\n    const langCode = languageCodes[0];\n    const family = languageFamilies[langCode];\n    const script = scripts[country.languages[langCode]];\n\n    let clue = 'The local tongue ';\n    if (family) {\n      clue += `traces back to the ${family} language family`;\n    } else {\n      clue += 'has ancient roots';\n    }\n\n    if (script) {\n      clue += `, written in the ${script}`;\n    }\n\n    clue += '.';\n\n    return clue;\n  }\n\n  function getFlagColors(flagUrl) {\n    // Placeholder colors\n    return ['red', 'white', 'blue'];\n  }\n\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValues.join('');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n\n    if (userAnswer === currentChallenge.answer) {\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(\n      (location) => location.name.toUpperCase() === userAnswer.toUpperCase()\n    );\n  \n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n  \n    const guessedLatLng = guessedLocation.latlng;\n    const actualLatLng = currentChallenge.location.latlng;\n  \n    const latDifference = actualLatLng[0] - guessedLatLng[0];\n    const lngDifference = actualLatLng[1] - guessedLatLng[1];\n  \n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n  \n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = (guess === currentChallenge.answer);\n      const status = isCorrect ? '🟩' : '🟥';\n      const letters = guess.split('').map(letter => `[${letter}]`).join(' ');\n      result += `${index + 1}. ${letters} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  function shareChallenge() {\n    const url = window.location.href;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n\n  if (!currentChallenge) {\n    return <div>Loading...</div>;\n  }\n  \n\n  return (\n    <div className=\"today-challenge\">\n      <h2>{`Challenge No. ${challengeNumber}`}</h2>\n      <h4>{currentChallenge.date}</h4>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues\">\n        <h3>🗺️ Clues:</h3>\n        <ul>\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"answer-boxes\">\n        {inputValues.map((value, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            maxLength=\"1\"\n            value={value}\n            onChange={(e) => handleInputChange(e, index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            disabled={gameEnded}\n            ref={(el) => (inputRefs.current[index] = el)}\n          />\n        ))}\n      </div>\n      <button className=\"btn btn-primary\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight EST!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n          <button className=\"btn btn-secondary ml-2\" onClick={shareChallenge}>Share This Challenge</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Challenge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}