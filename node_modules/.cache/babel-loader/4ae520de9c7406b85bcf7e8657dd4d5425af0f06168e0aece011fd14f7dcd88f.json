{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/TodayChallenge.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodayChallenge() {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValues, setInputValues] = useState([]);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const inputRefs = useRef([]);\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [challengeNumber, setChallengeNumber] = useState(0);\n  useEffect(() => {\n    // Fetch country data\n    axios.get('https://restcountries.com/v3.1/all').then(response => {\n      setCountries(response.data);\n      initializeGame(response.data);\n    }).catch(error => {\n      console.error('Error fetching country data:', error);\n    });\n  }, []);\n  function initializeGame(countryData) {\n    const today = new Date();\n    const estOffset = -5.0; // EST is UTC-5\n    const estDate = new Date(today.getTime() + estOffset * 60 * 60 * 1000);\n    const seed = estDate.getFullYear() * 10000 + (estDate.getMonth() + 1) * 100 + estDate.getDate();\n    setChallengeNumber(calculateChallengeNumber(estDate));\n    const challenge = generateChallenge(countryData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n  function calculateChallengeNumber(date) {\n    const startDate = new Date('2022-01-01T00:00:00Z');\n    const timeDiff = date - startDate;\n    return Math.floor(timeDiff / (1000 * 60 * 60 * 24)) + 1;\n  }\n  function generateChallenge(countryData, seed) {\n    // Use seed to generate deterministic challenge\n    const levels = {\n      'Easy': countryData.filter(country => country.population > 50000000),\n      'Medium': countryData.filter(country => country.population <= 50000000 && country.population > 10000000),\n      'Hard': countryData.filter(country => country.population <= 10000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const countriesInLevel = levels[level];\n    const countryIndex = seed % countriesInLevel.length;\n    let country = countriesInLevel[countryIndex];\n    while (!country.capital || !country.borders || !country.languages || !country.latlng) {\n      country = countriesInLevel[(countryIndex + 1) % countriesInLevel.length];\n    }\n    const clues = generateClues(country);\n    return {\n      level: level,\n      answer: country.name.common.toUpperCase(),\n      country: country,\n      clues: clues,\n      fact: `The capital of ${country.name.common} is ${country.capital[0]}.`\n    };\n  }\n  function generateClues(country) {\n    const clues = [];\n\n    // Clue 1: Treasure map-style latitude hint\n    const lat = country.latlng[0];\n    const latDirection = lat >= 0 ? 'north' : 'south';\n    clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}, but your treasure lies further.`);\n\n    // Clue 2: Treasure map-style longitude hint\n    const lng = country.latlng[1];\n    const lngDirection = lng >= 0 ? 'east' : 'west';\n    clues.push(`From there, head ${Math.abs(lng).toFixed(1)}° ${lngDirection} to find the spot.`);\n\n    // Clue 3: Neighboring countries\n    if (country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push(`The land you seek stands alone with no neighboring countries.`);\n    }\n\n    // Clue 4: Alternate between Flag colors and Compass Clue\n    if (Math.random() < 0.5) {\n      // Compass Clue\n      const regionHint = generateCompassClue(country);\n      clues.push(regionHint);\n    } else {\n      // Flag colors\n      const colors = getFlagColors(country.flags.png);\n      if (colors.length > 0) {\n        clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n      }\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n    return clues;\n  }\n  function generateCompassClue(country) {\n    const region = country.region;\n    const subregion = country.subregion;\n    let clue = 'Your treasure lies';\n    if (region && subregion) {\n      clue += ` in the lands of ${subregion}, within the greater ${region}.`;\n    } else if (region) {\n      clue += ` somewhere in ${region}.`;\n    } else {\n      clue += ' in a faraway land.';\n    }\n    return clue;\n  }\n  function generateLanguageClue(country) {\n    const languageCodes = country.languages ? Object.keys(country.languages) : [];\n    if (languageCodes.length === 0) return null;\n\n    // Map of language codes to families or scripts\n    const languageFamilies = {\n      'ara': 'Semitic',\n      'zho': 'Sino-Tibetan',\n      'hin': 'Indo-Aryan',\n      'ben': 'Indo-Aryan',\n      'rus': 'Slavic',\n      'jpn': 'Japonic',\n      'deu': 'Germanic',\n      'fra': 'Romance',\n      'spa': 'Romance',\n      'eng': 'Germanic',\n      'por': 'Romance',\n      'ita': 'Romance',\n      'kor': 'Koreanic',\n      'tur': 'Turkic',\n      'vie': 'Austroasiatic',\n      'tam': 'Dravidian',\n      'urd': 'Indo-Aryan',\n      'grn': 'Tupian',\n      'amh': 'Afro-Asiatic'\n      // Add more language code mappings as needed\n    };\n    const scripts = {\n      'Arab': 'abjad script',\n      'Cyrl': 'Cyrillic script',\n      'Hans': 'simplified Chinese characters',\n      'Hant': 'traditional Chinese characters',\n      'Latn': 'Latin script',\n      'Deva': 'Devanagari script',\n      'Beng': 'Bengali script',\n      'Jpan': 'Japanese script',\n      'Kore': 'Hangul script'\n      // Add more script mappings as needed\n    };\n\n    // Get the first language code\n    const langCode = languageCodes[0];\n    const family = languageFamilies[langCode];\n    const script = scripts[country.languages[langCode]];\n    let clue = 'The local tongue ';\n    if (family) {\n      clue += `traces back to the ${family} language family`;\n    } else {\n      clue += 'has ancient roots';\n    }\n    if (script) {\n      clue += `, written in the ${script}`;\n    }\n    clue += '.';\n    return clue;\n  }\n  function getFlagColors(flagUrl) {\n    // Placeholder colors\n    return ['red', 'white', 'blue'];\n  }\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n  function handleSubmit() {\n    const userAnswer = inputValues.join('');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    if (userAnswer === currentChallenge.answer) {\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedCountry = countries.find(country => country.name.common.toUpperCase() === userAnswer);\n    if (!guessedCountry || !currentChallenge.country) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLatLng = guessedCountry.latlng;\n    const actualLatLng = currentChallenge.country.latlng;\n    const latDifference = actualLatLng[0] - guessedLatLng[0];\n    const lngDifference = actualLatLng[1] - guessedLatLng[1];\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/${triesLeft}\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const status = guess === currentChallenge.answer ? '🟩' : '🟥';\n      const letters = guess.split('').map(letter => `[${letter}]`).join(' ');\n      result += `${index + 1}. ${letters} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  // const today = new Date();\n  const estOffset = -5.0; // EST is UTC-5\n  const estDate = new Date(new Date().getTime() + estOffset * 60 * 60 * 1000);\n  const challengeDate = estDate.toLocaleDateString(undefined, {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  setChallengeNumber(calculateChallengeNumber(estDate));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: challengeDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"No. \", challengeNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-boxes\",\n      children: inputValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: \"1\",\n        value: value,\n        onChange: e => handleInputChange(e, index),\n        onKeyDown: e => handleKeyDown(e, index),\n        disabled: gameEnded,\n        ref: el => inputRefs.current[index] = el\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n}\n_s(TodayChallenge, \"E/PRfBrgFJZOu3HtpEyBkC0xH3g=\");\n_c = TodayChallenge;\nexport default TodayChallenge;\nvar _c;\n$RefreshReg$(_c, \"TodayChallenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","TodayChallenge","_s","countries","setCountries","currentChallenge","setCurrentChallenge","inputValues","setInputValues","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","inputRefs","guessHistory","setGuessHistory","challengeNumber","setChallengeNumber","get","then","response","data","initializeGame","catch","error","console","countryData","today","Date","estOffset","estDate","getTime","seed","getFullYear","getMonth","getDate","calculateChallengeNumber","challenge","generateChallenge","Array","answer","length","fill","level","current","date","startDate","timeDiff","Math","floor","levels","filter","country","population","levelKeys","Object","keys","levelIndex","countriesInLevel","countryIndex","capital","borders","languages","latlng","clues","generateClues","name","common","toUpperCase","fact","lat","latDirection","push","abs","toFixed","lng","lngDirection","random","regionHint","generateCompassClue","colors","getFlagColors","flags","png","join","languageClue","generateLanguageClue","region","subregion","clue","languageCodes","languageFamilies","scripts","langCode","family","script","flagUrl","handleInputChange","e","index","value","target","test","newInputValues","focus","handleKeyDown","key","handleSubmit","userAnswer","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedCountry","find","guessedLatLng","actualLatLng","latDifference","lngDifference","copyResult","result","forEach","guess","status","letters","split","map","letter","navigator","clipboard","writeText","alert","challengeDate","toLocaleDateString","undefined","year","month","day","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","maxLength","onChange","onKeyDown","disabled","ref","el","onClick","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/TodayChallenge.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/App.css';\n\nfunction TodayChallenge() {\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [inputValues, setInputValues] = useState([]);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const inputRefs = useRef([]);\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [challengeNumber, setChallengeNumber] = useState(0);\n\n  useEffect(() => {\n    // Fetch country data\n    axios.get('https://restcountries.com/v3.1/all')\n      .then(response => {\n        setCountries(response.data);\n        initializeGame(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching country data:', error);\n      });\n  }, []);\n\n  function initializeGame(countryData) {\n    const today = new Date();\n    const estOffset = -5.0; // EST is UTC-5\n    const estDate = new Date(today.getTime() + (estOffset * 60 * 60 * 1000));\n    const seed = estDate.getFullYear() * 10000 + (estDate.getMonth() + 1) * 100 + estDate.getDate();\n    setChallengeNumber(calculateChallengeNumber(estDate));\n    const challenge = generateChallenge(countryData, seed);\n    setCurrentChallenge(challenge);\n    setInputValues(Array(challenge.answer.length).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = [];\n  }\n\n  function calculateChallengeNumber(date) {\n    const startDate = new Date('2022-01-01T00:00:00Z');\n    const timeDiff = date - startDate;\n    return Math.floor(timeDiff / (1000 * 60 * 60 * 24)) + 1;\n  }\n\n  function generateChallenge(countryData, seed) {\n    // Use seed to generate deterministic challenge\n    const levels = {\n      'Easy': countryData.filter(country => country.population > 50000000),\n      'Medium': countryData.filter(country => country.population <= 50000000 && country.population > 10000000),\n      'Hard': countryData.filter(country => country.population <= 10000000),\n    };\n\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const countriesInLevel = levels[level];\n\n    const countryIndex = seed % countriesInLevel.length;\n    let country = countriesInLevel[countryIndex];\n\n    while (!country.capital || !country.borders || !country.languages || !country.latlng) {\n      country = countriesInLevel[(countryIndex + 1) % countriesInLevel.length];\n    }\n\n    const clues = generateClues(country);\n\n    return {\n      level: level,\n      answer: country.name.common.toUpperCase(),\n      country: country,\n      clues: clues,\n      fact: `The capital of ${country.name.common} is ${country.capital[0]}.`,\n    };\n  }\n\n  function generateClues(country) {\n    const clues = [];\n\n    // Clue 1: Treasure map-style latitude hint\n    const lat = country.latlng[0];\n    const latDirection = lat >= 0 ? 'north' : 'south';\n    clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}, but your treasure lies further.`);\n\n    // Clue 2: Treasure map-style longitude hint\n    const lng = country.latlng[1];\n    const lngDirection = lng >= 0 ? 'east' : 'west';\n    clues.push(`From there, head ${Math.abs(lng).toFixed(1)}° ${lngDirection} to find the spot.`);\n\n    // Clue 3: Neighboring countries\n    if (country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push(`The land you seek stands alone with no neighboring countries.`);\n    }\n\n    // Clue 4: Alternate between Flag colors and Compass Clue\n    if (Math.random() < 0.5) {\n      // Compass Clue\n      const regionHint = generateCompassClue(country);\n      clues.push(regionHint);\n    } else {\n      // Flag colors\n      const colors = getFlagColors(country.flags.png);\n      if (colors.length > 0) {\n        clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n      }\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    }\n\n    return clues;\n  }\n\n  function generateCompassClue(country) {\n    const region = country.region;\n    const subregion = country.subregion;\n\n    let clue = 'Your treasure lies';\n    if (region && subregion) {\n      clue += ` in the lands of ${subregion}, within the greater ${region}.`;\n    } else if (region) {\n      clue += ` somewhere in ${region}.`;\n    } else {\n      clue += ' in a faraway land.';\n    }\n\n    return clue;\n  }\n\n  function generateLanguageClue(country) {\n    const languageCodes = country.languages ? Object.keys(country.languages) : [];\n    if (languageCodes.length === 0) return null;\n\n    // Map of language codes to families or scripts\n    const languageFamilies = {\n      'ara': 'Semitic',\n      'zho': 'Sino-Tibetan',\n      'hin': 'Indo-Aryan',\n      'ben': 'Indo-Aryan',\n      'rus': 'Slavic',\n      'jpn': 'Japonic',\n      'deu': 'Germanic',\n      'fra': 'Romance',\n      'spa': 'Romance',\n      'eng': 'Germanic',\n      'por': 'Romance',\n      'ita': 'Romance',\n      'kor': 'Koreanic',\n      'tur': 'Turkic',\n      'vie': 'Austroasiatic',\n      'tam': 'Dravidian',\n      'urd': 'Indo-Aryan',\n      'grn': 'Tupian',\n      'amh': 'Afro-Asiatic',\n      // Add more language code mappings as needed\n    };\n\n    const scripts = {\n      'Arab': 'abjad script',\n      'Cyrl': 'Cyrillic script',\n      'Hans': 'simplified Chinese characters',\n      'Hant': 'traditional Chinese characters',\n      'Latn': 'Latin script',\n      'Deva': 'Devanagari script',\n      'Beng': 'Bengali script',\n      'Jpan': 'Japanese script',\n      'Kore': 'Hangul script',\n      // Add more script mappings as needed\n    };\n\n    // Get the first language code\n    const langCode = languageCodes[0];\n    const family = languageFamilies[langCode];\n    const script = scripts[country.languages[langCode]];\n\n    let clue = 'The local tongue ';\n    if (family) {\n      clue += `traces back to the ${family} language family`;\n    } else {\n      clue += 'has ancient roots';\n    }\n\n    if (script) {\n      clue += `, written in the ${script}`;\n    }\n\n    clue += '.';\n\n    return clue;\n  }\n\n  function getFlagColors(flagUrl) {\n    // Placeholder colors\n    return ['red', 'white', 'blue'];\n  }\n\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]?$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (value && index < inputRefs.current.length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  }\n\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    }\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValues.join('');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n\n    if (userAnswer === currentChallenge.answer) {\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n\n  function getDirectionHint(userAnswer) {\n    const guessedCountry = countries.find(\n      (country) => country.name.common.toUpperCase() === userAnswer\n    );\n\n    if (!guessedCountry || !currentChallenge.country) {\n      return 'That place is unknown to our maps.';\n    }\n\n    const guessedLatLng = guessedCountry.latlng;\n    const actualLatLng = currentChallenge.country.latlng;\n\n    const latDifference = actualLatLng[0] - guessedLatLng[0];\n    const lngDifference = actualLatLng[1] - guessedLatLng[1];\n\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/${triesLeft}\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const status = (guess === currentChallenge.answer) ? '🟩' : '🟥';\n      const letters = guess.split('').map(letter => `[${letter}]`).join(' ');\n      result += `${index + 1}. ${letters} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  // const today = new Date();\n  const estOffset = -5.0; // EST is UTC-5\n  const estDate = new Date(new Date().getTime() + (estOffset * 60 * 60 * 1000));\n  const challengeDate = estDate.toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' });\n  setChallengeNumber(calculateChallengeNumber(estDate));\n  \n  return (\n    <div className=\"today-challenge\">\n      <h2>{challengeDate}</h2>\n      <h4>No. {challengeNumber}</h4>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues\">\n        <h3>🗺️ Clues:</h3>\n        <ul>\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"answer-boxes\">\n        {inputValues.map((value, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            maxLength=\"1\"\n            value={value}\n            onChange={(e) => handleInputChange(e, index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            disabled={gameEnded}\n            ref={(el) => (inputRefs.current[index] = el)}\n          />\n        ))}\n      </div>\n      <button className=\"btn btn-primary\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default TodayChallenge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}