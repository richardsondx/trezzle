{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValues(state.inputValues || []);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n      inputRefs.current = [];\n    }\n  }, [challengeNumber]);\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([new Promise(resolve => {\n      Papa.parse('/worldcities.csv', {\n        download: true,\n        header: true,\n        complete: function (results) {\n          const cities = results.data;\n          const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n          resolve(validCities);\n        }\n      });\n    }), axios.get('https://restcountries.com/v3.1/all').then(response => response.data)]).then(([validCities, countriesData]) => {\n      setLocations(validCities);\n      setCountries(countriesData);\n      if (!currentChallenge) {\n        initializeGame(validCities, countriesData);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData, countriesData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed, countriesData);\n    if (!challenge) {\n      setMessage('No valid challenge could be generated. Please try again later.');\n      return;\n    }\n    setCurrentChallenge(challenge);\n    const initialInputValues = Array(challenge.answer.length).fill('');\n    setInputValues(initialInputValues);\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = Array(challenge.answer.length).fill(null);\n  }\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + (challengeNumber - 1) * 24 * 60 * 60 * 1000);\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n  function generateChallenge(locationData, seed, countriesData) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n    if (!locationsInLevel || locationsInLevel.length === 0) {\n      console.error(`No locations found for level ${level}`);\n      return null;\n    }\n    let locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n    let attempts = 0;\n    while ((!location.lat || !location.lng) && attempts < locationsInLevel.length) {\n      locationIndex = (locationIndex + 1) % locationsInLevel.length;\n      location = locationsInLevel[locationIndex];\n      attempts++;\n    }\n    if (!location || !location.lat || !location.lng) {\n      console.error('Could not find a valid location');\n      return null;\n    }\n\n    // Find the country data\n    const countryName = location.country;\n    const country = countriesData.find(c => c.name.common.toLowerCase() === countryName.toLowerCase());\n    const clues = generateClues(location, country);\n    return {\n      level: level,\n      answer: location.city_ascii,\n      // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`\n    };\n  }\n  function generateClues(location, country) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country && country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push('The land you seek stands alone with no neighboring countries.');\n    }\n\n    // Clue 4: Flag colors or symbols\n    const colors = getFlagColors(country);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    } else {\n      clues.push('The flag bears unique symbols known to the locals.');\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    } else {\n      clues.push('The local tongue holds ancient secrets.');\n    }\n    return clues;\n  }\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n    let clue = 'Your treasure lies';\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n    return clue;\n  }\n  function getFlagColors(country) {\n    if (!country || !country.flags || !country.flags.svg) return [];\n    // Placeholder logic; you can use a library or API to get actual flag colors.\n    // For example purposes, let's return some dummy colors.\n    const knownColors = {\n      'United States': ['red', 'white', 'blue'],\n      'Canada': ['red', 'white']\n      // Add more countries as needed\n    };\n    return knownColors[country.name.common] || [];\n  }\n  function generateLanguageClue(country) {\n    if (!country || !country.languages) return null;\n    const languages = Object.values(country.languages);\n    if (languages.length === 0) return null;\n    const language = languages[0]; // Taking the first language\n    return `The local tongue traces back to the ${language} language family.`;\n  }\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      const nextIndex = letterIndices.indexOf(index) + 1;\n      if (nextIndex < letterIndices.length) {\n        inputRefs.current[letterIndices[nextIndex]].focus();\n      }\n    } else if (value === '') {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = '';\n      setInputValues(newInputValues);\n    }\n  }\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      e.preventDefault();\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else {\n        const prevIndex = letterIndices.indexOf(index) - 1;\n        if (prevIndex >= 0) {\n          inputRefs.current[letterIndices[prevIndex]].focus();\n        }\n      }\n    }\n  }\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase().replace(/\\s/g, '');\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/\\s/g, '').replace(/[^A-Z]/g, '');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(currentChallenge.answer.length).fill('')); // Clear the input fields\n\n    if (userAnswer === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(location => location.city_ascii.toUpperCase().replace(/\\s/g, '') === userAnswer);\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase().replace(/\\s/g, '') === currentChallenge.answer.toUpperCase().replace(/\\s/g, '').replace(/[^A-Z]/g, '');\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  if (!currentChallenge || !inputValues || inputValues.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message || 'Loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Prepare data for rendering input boxes\n  const answerArray = currentChallenge.answer.toUpperCase().split('');\n  const letterIndices = [];\n  answerArray.forEach((char, index) => {\n    if (/[A-Z]/.test(char)) {\n      letterIndices.push(index);\n    }\n  });\n  useEffect(() => {\n    if (!gameEnded && inputRefs.current[letterIndices[0]]) {\n      inputRefs.current[letterIndices[0]].focus();\n    }\n  }, [currentChallenge, gameEnded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Challenge No. ${challengeNumber}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"list-unstyled\",\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-boxes\",\n      children: answerArray.map((char, index) => {\n        if (/[A-Z]/.test(char)) {\n          return /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputValues[index] || '',\n            onChange: e => handleInputChange(e, index),\n            onKeyDown: e => handleKeyDown(e, index),\n            ref: el => inputRefs.current[index] = el,\n            disabled: gameEnded,\n            className: \"letter-input\",\n            autoFocus: index === letterIndices[0]\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"non-letter\",\n            children: char\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-2\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), guessHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: guessHistory.map((guess, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: guess\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight EST!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary ml-2\",\n        onClick: shareChallenge,\n        children: \"Share This Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 360,\n    columnNumber: 5\n  }, this);\n}\n_s(Challenge, \"8cieH34qOL4Z4xorFZmZZ2nIgEA=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","axios","useParams","START_DATE","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","locations","setLocations","countries","setCountries","currentChallenge","setCurrentChallenge","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","guessHistory","setGuessHistory","inputValues","setInputValues","inputRefs","savedState","localStorage","getItem","state","JSON","parse","current","setItem","stringify","Promise","all","resolve","download","header","complete","results","cities","data","validCities","filter","city","city_ascii","lat","lng","population","get","then","response","countriesData","initializeGame","locationData","seed","calculateSeedFromNumber","challenge","generateChallenge","initialInputValues","Array","answer","length","fill","level","startDate","Date","seedDate","getTime","getFullYear","getMonth","getDate","levels","parseInt","levelKeys","Object","keys","levelIndex","locationsInLevel","console","error","locationIndex","location","attempts","countryName","country","find","c","name","common","toLowerCase","clues","generateClues","fact","Math","random","parseFloat","latDirection","push","abs","toFixed","lngDirection","compassClue","generateCompassClue","borders","colors","getFlagColors","join","languageClue","generateLanguageClue","clue","flags","svg","knownColors","languages","values","language","handleInputChange","e","index","value","target","toUpperCase","test","newInputValues","nextIndex","letterIndices","indexOf","focus","handleKeyDown","key","preventDefault","prevIndex","handleSubmit","userAnswer","trim","replace","correctAnswer","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedLocation","guessedLat","guessedLng","actualLat","actualLng","latDifference","lngDifference","copyResult","result","forEach","guess","isCorrect","status","navigator","clipboard","writeText","alert","shareChallenge","url","window","origin","children","fileName","_jsxFileName","lineNumber","columnNumber","answerArray","split","char","className","map","type","onChange","onKeyDown","ref","el","disabled","autoFocus","onClick","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constants.js';\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValues(state.inputValues || []);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n      inputRefs.current = [];\n    }\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory,\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([\n      new Promise((resolve) => {\n        Papa.parse('/worldcities.csv', {\n          download: true,\n          header: true,\n          complete: function (results) {\n            const cities = results.data;\n            const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n            resolve(validCities);\n          },\n        });\n      }),\n      axios.get('https://restcountries.com/v3.1/all').then(response => response.data),\n    ]).then(([validCities, countriesData]) => {\n      setLocations(validCities);\n      setCountries(countriesData);\n      if (!currentChallenge) {\n        initializeGame(validCities, countriesData);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData, countriesData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed, countriesData);\n\n    if (!challenge) {\n      setMessage('No valid challenge could be generated. Please try again later.');\n      return;\n    }\n\n    setCurrentChallenge(challenge);\n    const initialInputValues = Array(challenge.answer.length).fill('');\n    setInputValues(initialInputValues);\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = Array(challenge.answer.length).fill(null);\n  }\n\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + ((challengeNumber - 1) * 24 * 60 * 60 * 1000));\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n\n  function generateChallenge(locationData, seed, countriesData) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000),\n    };\n\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n\n    if (!locationsInLevel || locationsInLevel.length === 0) {\n      console.error(`No locations found for level ${level}`);\n      return null;\n    }\n\n    let locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n\n    let attempts = 0;\n    while ((!location.lat || !location.lng) && attempts < locationsInLevel.length) {\n      locationIndex = (locationIndex + 1) % locationsInLevel.length;\n      location = locationsInLevel[locationIndex];\n      attempts++;\n    }\n\n    if (!location || !location.lat || !location.lng) {\n      console.error('Could not find a valid location');\n      return null;\n    }\n\n    // Find the country data\n    const countryName = location.country;\n    const country = countriesData.find(c => c.name.common.toLowerCase() === countryName.toLowerCase());\n\n    const clues = generateClues(location, country);\n\n    return {\n      level: level,\n      answer: location.city_ascii, // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The city of ${location.city_ascii} is located in ${location.country}.`,\n    };\n  }\n\n  function generateClues(location, country) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country && country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push('The land you seek stands alone with no neighboring countries.');\n    }\n\n    // Clue 4: Flag colors or symbols\n    const colors = getFlagColors(country);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    } else {\n      clues.push('The flag bears unique symbols known to the locals.');\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    } else {\n      clues.push('The local tongue holds ancient secrets.');\n    }\n\n    return clues;\n  }\n\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n\n    let clue = 'Your treasure lies';\n\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n\n    return clue;\n  }\n\n  function getFlagColors(country) {\n    if (!country || !country.flags || !country.flags.svg) return [];\n    // Placeholder logic; you can use a library or API to get actual flag colors.\n    // For example purposes, let's return some dummy colors.\n    const knownColors = {\n      'United States': ['red', 'white', 'blue'],\n      'Canada': ['red', 'white'],\n      // Add more countries as needed\n    };\n    return knownColors[country.name.common] || [];\n  }\n\n  function generateLanguageClue(country) {\n    if (!country || !country.languages) return null;\n    const languages = Object.values(country.languages);\n    if (languages.length === 0) return null;\n\n    const language = languages[0]; // Taking the first language\n    return `The local tongue traces back to the ${language} language family.`;\n  }\n\n  function handleInputChange(e, index) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      const nextIndex = letterIndices.indexOf(index) + 1;\n      if (nextIndex < letterIndices.length) {\n        inputRefs.current[letterIndices[nextIndex]].focus();\n      }\n    } else if (value === '') {\n      const newInputValues = [...inputValues];\n      newInputValues[index] = '';\n      setInputValues(newInputValues);\n    }\n  }\n\n  function handleKeyDown(e, index) {\n    if (e.key === 'Backspace') {\n      e.preventDefault();\n      if (inputValues[index]) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = '';\n        setInputValues(newInputValues);\n      } else {\n        const prevIndex = letterIndices.indexOf(index) - 1;\n        if (prevIndex >= 0) {\n          inputRefs.current[letterIndices[prevIndex]].focus();\n        }\n      }\n    }\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase().replace(/\\s/g, '');\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/\\s/g, '').replace(/[^A-Z]/g, '');\n\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(currentChallenge.answer.length).fill('')); // Clear the input fields\n\n    if (userAnswer === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(\n      (location) => location.city_ascii.toUpperCase().replace(/\\s/g, '') === userAnswer\n    );\n\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase().replace(/\\s/g, '') === currentChallenge.answer.toUpperCase().replace(/\\s/g, '').replace(/[^A-Z]/g, '');\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n\n  if (!currentChallenge || !inputValues || inputValues.length === 0) {\n    return <div>{message || 'Loading...'}</div>;\n  }\n\n  // Prepare data for rendering input boxes\n  const answerArray = currentChallenge.answer.toUpperCase().split('');\n  const letterIndices = [];\n  answerArray.forEach((char, index) => {\n    if (/[A-Z]/.test(char)) {\n      letterIndices.push(index);\n    }\n  });\n\n  useEffect(() => {\n    if (!gameEnded && inputRefs.current[letterIndices[0]]) {\n      inputRefs.current[letterIndices[0]].focus();\n    }\n  }, [currentChallenge, gameEnded]);\n\n  return (\n    <div className=\"today-challenge\">\n      <h2>{`Challenge No. ${challengeNumber}`}</h2>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues text-center\">\n        <h3>🗺️ Clues:</h3>\n        <ol className=\"list-unstyled\">\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ol>\n      </div>\n      <div className=\"answer-boxes\">\n        {answerArray.map((char, index) => {\n          if (/[A-Z]/.test(char)) {\n            return (\n              <input\n                key={index}\n                type=\"text\"\n                value={inputValues[index] || ''}\n                onChange={(e) => handleInputChange(e, index)}\n                onKeyDown={(e) => handleKeyDown(e, index)}\n                ref={(el) => (inputRefs.current[index] = el)}\n                disabled={gameEnded}\n                className=\"letter-input\"\n                autoFocus={index === letterIndices[0]}\n              />\n            );\n          } else {\n            return (\n              <div key={index} className=\"non-letter\">\n                {char}\n              </div>\n            );\n          }\n        })}\n      </div>\n      <button className=\"btn btn-primary mt-2\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      {guessHistory.length > 0 && (\n        <div className=\"guess-history\">\n          <h4>Your Guesses:</h4>\n          <ul>\n            {guessHistory.map((guess, index) => (\n              <li key={index}>{guess}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight EST!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n          <button className=\"btn btn-secondary ml-2\" onClick={shareChallenge}>Share This Challenge</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Challenge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}