{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  // Prepare data for rendering input boxes\n  let answerArray = [];\n  let letterIndices = [];\n  if (currentChallenge && currentChallenge.answer) {\n    answerArray = currentChallenge.answer.toUpperCase().split('');\n    answerArray.forEach((char, index) => {\n      if (/[A-Z]/.test(char)) {\n        letterIndices.push(index);\n      }\n    });\n  }\n\n  // Focus on the first input box when the game starts\n  useEffect(() => {\n    if (!gameEnded && letterIndices.length > 0 && inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n  }, [currentChallenge, gameEnded]);\n\n  // Load game state from localStorage\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n\n      // Initialize inputValues and inputRefs based on the number of letters\n      const numLetters = state.currentChallenge.answer.replace(/[^A-Z]/gi, '').length;\n      setInputValues(state.inputValues || Array(numLetters).fill(''));\n      inputRefs.current = Array(numLetters).fill(null);\n    } else {\n      // If no saved state, initialize the game after data is fetched\n      if (locations.length > 0 && countries.length > 0) {\n        initializeGame(locations, countries);\n      }\n    }\n  }, [challengeNumber, locations, countries]);\n\n  // Save game state to localStorage\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([new Promise(resolve => {\n      Papa.parse('/worldcities.csv', {\n        download: true,\n        header: true,\n        complete: function (results) {\n          const cities = results.data;\n          const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n          resolve(validCities);\n        }\n      });\n    }), axios.get('https://restcountries.com/v3.1/all').then(response => response.data)]).then(([validCities, countriesData]) => {\n      setLocations(validCities);\n      setCountries(countriesData);\n      // Initialize the game if no saved state exists\n      const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n      if (!savedState) {\n        initializeGame(validCities, countriesData);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData, countriesData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed, countriesData);\n    if (!challenge) {\n      setMessage('No valid challenge could be generated. Please try again later.');\n      return;\n    }\n    setCurrentChallenge(challenge);\n    const numLetters = challenge.answer.replace(/[^A-Z]/gi, '').length;\n    setInputValues(Array(numLetters).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = Array(numLetters).fill(null);\n  }\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + (challengeNumber - 1) * 24 * 60 * 60 * 1000);\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n  function generateChallenge(locationData, seed, countriesData) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000)\n    };\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n    if (!locationsInLevel || locationsInLevel.length === 0) {\n      console.error(`No locations found for level ${level}`);\n      return null;\n    }\n    let locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n    let attempts = 0;\n    while ((!location.lat || !location.lng) && attempts < locationsInLevel.length) {\n      locationIndex = (locationIndex + 1) % locationsInLevel.length;\n      location = locationsInLevel[locationIndex];\n      attempts++;\n    }\n    if (!location || !location.lat || !location.lng) {\n      console.error('Could not find a valid location');\n      return null;\n    }\n\n    // Find the country data\n    const countryName = location.country;\n    const country = countriesData.find(c => c.name.common.toLowerCase() === countryName.toLowerCase());\n    const clues = generateClues(location, country);\n    return {\n      level: level,\n      answer: location.city_ascii,\n      // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The tresor is located in the city of ${location.city_ascii} in ${location.country}.`\n    };\n  }\n  function generateClues(location, country) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country && country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push('The land you seek stands alone with no neighboring countries.');\n    }\n\n    // Clue 4: Flag colors or symbols\n    const colors = getFlagColors(country);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    } else {\n      clues.push('The flag bears unique symbols known to the locals.');\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    } else {\n      clues.push('The local tongue holds ancient secrets.');\n    }\n    return clues;\n  }\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n    let clue = 'Your treasure lies';\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n    return clue;\n  }\n  function getFlagColors(country) {\n    if (!country || !country.flags || !country.flags.svg) return [];\n    // Placeholder logic; you can use a library or API to get actual flag colors.\n    // For example purposes, let's return some dummy colors.\n    const knownColors = {\n      'United States': ['red', 'white', 'blue'],\n      'Canada': ['red', 'white']\n      // Add more countries as needed\n    };\n    return knownColors[country.name.common] || [];\n  }\n  function generateLanguageClue(country) {\n    if (!country || !country.languages) return null;\n    const languages = Object.values(country.languages);\n    if (languages.length === 0) return null;\n    const language = languages[0]; // Taking the first language\n    return `The local tongue traces back to the ${language} language family.`;\n  }\n  function handleInputChange(e, inputIndex) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[inputIndex] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (inputIndex < inputValues.length - 1) {\n        inputRefs.current[inputIndex + 1].focus();\n      }\n    } else if (value === '') {\n      const newInputValues = [...inputValues];\n      newInputValues[inputIndex] = '';\n      setInputValues(newInputValues);\n    }\n  }\n  function handleKeyDown(e, inputIndex) {\n    if (e.key === 'Backspace') {\n      e.preventDefault();\n      if (inputValues[inputIndex]) {\n        const newInputValues = [...inputValues];\n        newInputValues[inputIndex] = '';\n        setInputValues(newInputValues);\n      } else if (inputIndex > 0) {\n        inputRefs.current[inputIndex - 1].focus();\n      }\n    }\n  }\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase();\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/[^A-Z]/g, '');\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(inputValues.length).fill('')); // Clear the input fields\n\n    if (userAnswer.replace(/[^A-Z]/g, '') === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(location => location.city_ascii.toUpperCase().replace(/[^A-Z]/g, '') === userAnswer.replace(/[^A-Z]/g, ''));\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase().replace(/[^A-Z]/g, '') === currentChallenge.answer.toUpperCase().replace(/[^A-Z]/g, '');\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n  if (!currentChallenge || !inputValues || inputValues.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message || 'Loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"today-challenge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Challenge No. ${challengeNumber}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clues text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDDFA\\uFE0F Clues:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"list-unstyled\",\n        children: currentChallenge.clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: clue\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-boxes\",\n      children: answerArray.map((char, index) => {\n        if (/[A-Z]/.test(char)) {\n          const inputIndex = letterIndices.indexOf(index);\n          return /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputValues[inputIndex] || '',\n            onChange: e => handleInputChange(e, inputIndex),\n            onKeyDown: e => handleKeyDown(e, inputIndex),\n            ref: el => inputRefs.current[inputIndex] = el,\n            disabled: gameEnded,\n            className: \"letter-input\",\n            autoFocus: inputIndex === 0\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"non-letter\",\n            children: char\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-2\",\n      onClick: handleSubmit,\n      disabled: gameEnded,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tries\",\n      children: Array(triesLeft).fill('🟩').map((box, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: box\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), guessHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: guessHistory.map((guess, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: guess\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speech-bubble\",\n        children: [\"\\uD83D\\uDC26\\u200D\\uD83D\\uDD25 \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try the next challenge tomorrow at midnight EST!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: copyResult,\n        children: \"Share Your Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary ml-2\",\n        onClick: shareChallenge,\n        children: \"Share This Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 5\n  }, this);\n}\n_s(Challenge, \"8cieH34qOL4Z4xorFZmZZ2nIgEA=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","axios","useParams","START_DATE","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","locations","setLocations","countries","setCountries","currentChallenge","setCurrentChallenge","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","guessHistory","setGuessHistory","inputValues","setInputValues","inputRefs","answerArray","letterIndices","answer","toUpperCase","split","forEach","char","index","test","push","length","current","focus","savedState","localStorage","getItem","state","JSON","parse","numLetters","replace","Array","fill","initializeGame","setItem","stringify","Promise","all","resolve","download","header","complete","results","cities","data","validCities","filter","city","city_ascii","lat","lng","population","get","then","response","countriesData","locationData","seed","calculateSeedFromNumber","challenge","generateChallenge","level","startDate","Date","seedDate","getTime","getFullYear","getMonth","getDate","levels","parseInt","levelKeys","Object","keys","levelIndex","locationsInLevel","console","error","locationIndex","location","attempts","countryName","country","find","c","name","common","toLowerCase","clues","generateClues","fact","Math","random","parseFloat","latDirection","abs","toFixed","lngDirection","compassClue","generateCompassClue","borders","colors","getFlagColors","join","languageClue","generateLanguageClue","clue","flags","svg","knownColors","languages","values","language","handleInputChange","e","inputIndex","value","target","newInputValues","handleKeyDown","key","preventDefault","handleSubmit","userAnswer","trim","correctAnswer","newGuessHistory","newTriesLeft","directionHint","getDirectionHint","guessedLocation","guessedLat","guessedLng","actualLat","actualLng","latDifference","lngDifference","copyResult","result","guess","isCorrect","status","navigator","clipboard","writeText","alert","shareChallenge","url","window","origin","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","indexOf","type","onChange","onKeyDown","ref","el","disabled","autoFocus","onClick","box","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constants.js';\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  // Prepare data for rendering input boxes\n  let answerArray = [];\n  let letterIndices = [];\n\n  if (currentChallenge && currentChallenge.answer) {\n    answerArray = currentChallenge.answer.toUpperCase().split('');\n    answerArray.forEach((char, index) => {\n      if (/[A-Z]/.test(char)) {\n        letterIndices.push(index);\n      }\n    });\n  }\n\n  // Focus on the first input box when the game starts\n  useEffect(() => {\n    if (!gameEnded && letterIndices.length > 0 && inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n  }, [currentChallenge, gameEnded]);\n\n  // Load game state from localStorage\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n\n      // Initialize inputValues and inputRefs based on the number of letters\n      const numLetters = state.currentChallenge.answer.replace(/[^A-Z]/gi, '').length;\n      setInputValues(state.inputValues || Array(numLetters).fill(''));\n      inputRefs.current = Array(numLetters).fill(null);\n    } else {\n      // If no saved state, initialize the game after data is fetched\n      if (locations.length > 0 && countries.length > 0) {\n        initializeGame(locations, countries);\n      }\n    }\n  }, [challengeNumber, locations, countries]);\n\n  // Save game state to localStorage\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory,\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([\n      new Promise((resolve) => {\n        Papa.parse('/worldcities.csv', {\n          download: true,\n          header: true,\n          complete: function (results) {\n            const cities = results.data;\n            const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n            resolve(validCities);\n          },\n        });\n      }),\n      axios.get('https://restcountries.com/v3.1/all').then(response => response.data),\n    ]).then(([validCities, countriesData]) => {\n      setLocations(validCities);\n      setCountries(countriesData);\n      // Initialize the game if no saved state exists\n      const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n      if (!savedState) {\n        initializeGame(validCities, countriesData);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData, countriesData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed, countriesData);\n\n    if (!challenge) {\n      setMessage('No valid challenge could be generated. Please try again later.');\n      return;\n    }\n\n    setCurrentChallenge(challenge);\n    const numLetters = challenge.answer.replace(/[^A-Z]/gi, '').length;\n    setInputValues(Array(numLetters).fill(''));\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = Array(numLetters).fill(null);\n  }\n\n  function calculateSeedFromNumber(challengeNumber) {\n    const startDate = new Date(START_DATE);\n    const seedDate = new Date(startDate.getTime() + ((challengeNumber - 1) * 24 * 60 * 60 * 1000));\n    const seed = seedDate.getFullYear() * 10000 + (seedDate.getMonth() + 1) * 100 + seedDate.getDate();\n    return seed;\n  }\n\n  function generateChallenge(locationData, seed, countriesData) {\n    const levels = {\n      'Easy': locationData.filter(city => parseInt(city.population) > 5000000),\n      'Medium': locationData.filter(city => parseInt(city.population) <= 5000000 && parseInt(city.population) > 1000000),\n      'Hard': locationData.filter(city => parseInt(city.population) <= 1000000),\n    };\n\n    const levelKeys = Object.keys(levels);\n    const levelIndex = seed % levelKeys.length;\n    const level = levelKeys[levelIndex];\n    const locationsInLevel = levels[level];\n\n    if (!locationsInLevel || locationsInLevel.length === 0) {\n      console.error(`No locations found for level ${level}`);\n      return null;\n    }\n\n    let locationIndex = seed % locationsInLevel.length;\n    let location = locationsInLevel[locationIndex];\n\n    let attempts = 0;\n    while ((!location.lat || !location.lng) && attempts < locationsInLevel.length) {\n      locationIndex = (locationIndex + 1) % locationsInLevel.length;\n      location = locationsInLevel[locationIndex];\n      attempts++;\n    }\n\n    if (!location || !location.lat || !location.lng) {\n      console.error('Could not find a valid location');\n      return null;\n    }\n\n    // Find the country data\n    const countryName = location.country;\n    const country = countriesData.find(c => c.name.common.toLowerCase() === countryName.toLowerCase());\n\n    const clues = generateClues(location, country);\n\n    return {\n      level: level,\n      answer: location.city_ascii, // Use 'city_ascii' for the answer\n      location: location,\n      clues: clues,\n      fact: `The tresor is located in the city of ${location.city_ascii} in ${location.country}.`,\n    };\n  }\n\n  function generateClues(location, country) {\n    const clues = [];\n\n    // Clue 1: Either longitude or latitude\n    if (Math.random() < 0.5) {\n      // Latitude clue\n      const lat = parseFloat(location.lat);\n      const latDirection = lat >= 0 ? 'north' : 'south';\n      clues.push(`Sail to the ${Math.abs(lat).toFixed(1)}° ${latDirection}.`);\n    } else {\n      // Longitude clue\n      const lng = parseFloat(location.lng);\n      const lngDirection = lng >= 0 ? 'east' : 'west';\n      clues.push(`Head towards ${Math.abs(lng).toFixed(1)}° ${lngDirection}.`);\n    }\n\n    // Clue 2: Compass clue\n    const compassClue = generateCompassClue(location);\n    clues.push(compassClue);\n\n    // Clue 3: Neighboring countries\n    if (country && country.borders && country.borders.length > 0) {\n      clues.push(`You'll pass by ${country.borders.length} neighboring lands on your journey.`);\n    } else {\n      clues.push('The land you seek stands alone with no neighboring countries.');\n    }\n\n    // Clue 4: Flag colors or symbols\n    const colors = getFlagColors(country);\n    if (colors.length > 0) {\n      clues.push(`Hoist the flag with colors of ${colors.join(', ')}.`);\n    } else {\n      clues.push('The flag bears unique symbols known to the locals.');\n    }\n\n    // Clue 5: Language origin or script\n    const languageClue = generateLanguageClue(country);\n    if (languageClue) {\n      clues.push(languageClue);\n    } else {\n      clues.push('The local tongue holds ancient secrets.');\n    }\n\n    return clues;\n  }\n\n  function generateCompassClue(location) {\n    const lat = parseFloat(location.lat);\n    const lng = parseFloat(location.lng);\n\n    let clue = 'Your treasure lies';\n\n    if (lat >= 45) {\n      clue += ' in the cold northern realms.';\n    } else if (lat <= -45) {\n      clue += ' in the icy southern lands.';\n    } else if (lng >= 90 || lng <= -90) {\n      clue += ' in the far east or west.';\n    } else {\n      clue += ' somewhere in the temperate zones.';\n    }\n\n    return clue;\n  }\n\n  function getFlagColors(country) {\n    if (!country || !country.flags || !country.flags.svg) return [];\n    // Placeholder logic; you can use a library or API to get actual flag colors.\n    // For example purposes, let's return some dummy colors.\n    const knownColors = {\n      'United States': ['red', 'white', 'blue'],\n      'Canada': ['red', 'white'],\n      // Add more countries as needed\n    };\n    return knownColors[country.name.common] || [];\n  }\n\n  function generateLanguageClue(country) {\n    if (!country || !country.languages) return null;\n    const languages = Object.values(country.languages);\n    if (languages.length === 0) return null;\n\n    const language = languages[0]; // Taking the first language\n    return `The local tongue traces back to the ${language} language family.`;\n  }\n\n  function handleInputChange(e, inputIndex) {\n    const value = e.target.value.toUpperCase();\n    if (/^[A-Z]$/.test(value)) {\n      const newInputValues = [...inputValues];\n      newInputValues[inputIndex] = value;\n      setInputValues(newInputValues);\n\n      // Move to the next input if available\n      if (inputIndex < inputValues.length - 1) {\n        inputRefs.current[inputIndex + 1].focus();\n      }\n    } else if (value === '') {\n      const newInputValues = [...inputValues];\n      newInputValues[inputIndex] = '';\n      setInputValues(newInputValues);\n    }\n  }\n\n  function handleKeyDown(e, inputIndex) {\n    if (e.key === 'Backspace') {\n      e.preventDefault();\n      if (inputValues[inputIndex]) {\n        const newInputValues = [...inputValues];\n        newInputValues[inputIndex] = '';\n        setInputValues(newInputValues);\n      } else if (inputIndex > 0) {\n        inputRefs.current[inputIndex - 1].focus();\n      }\n    }\n  }\n\n  function handleSubmit() {\n    const userAnswer = inputValues.join('').trim().toUpperCase();\n    const correctAnswer = currentChallenge.answer.toUpperCase().replace(/[^A-Z]/g, '');\n\n    const newGuessHistory = [...guessHistory, userAnswer];\n    setGuessHistory(newGuessHistory);\n    setInputValues(Array(inputValues.length).fill('')); // Clear the input fields\n\n    if (userAnswer.replace(/[^A-Z]/g, '') === correctAnswer) {\n      // Correct answer\n      setMessage(`${currentChallenge.fact}`);\n      setGameEnded(true);\n    } else {\n      // Incorrect answer\n      const newTriesLeft = triesLeft - 1;\n      setTriesLeft(newTriesLeft);\n\n      const directionHint = getDirectionHint(userAnswer);\n      if (newTriesLeft > 0) {\n        setMessage(`Incorrect. ${directionHint} Tries left: ${newTriesLeft}`);\n      } else {\n        setMessage(`Out of tries! The answer was ${currentChallenge.answer}.`);\n        setGameEnded(true);\n      }\n    }\n  }\n\n  function getDirectionHint(userAnswer) {\n    const guessedLocation = locations.find(\n      (location) => location.city_ascii.toUpperCase().replace(/[^A-Z]/g, '') === userAnswer.replace(/[^A-Z]/g, '')\n    );\n\n    if (!guessedLocation || !currentChallenge.location) {\n      return 'That place is unknown to our maps.';\n    }\n\n    const guessedLat = parseFloat(guessedLocation.lat);\n    const guessedLng = parseFloat(guessedLocation.lng);\n    const actualLat = parseFloat(currentChallenge.location.lat);\n    const actualLng = parseFloat(currentChallenge.location.lng);\n\n    const latDifference = actualLat - guessedLat;\n    const lngDifference = actualLng - guessedLng;\n\n    const latDirection = latDifference > 0 ? 'north' : 'south';\n    const lngDirection = lngDifference > 0 ? 'east' : 'west';\n\n    return `You're off course! Try heading ${Math.abs(latDifference).toFixed(1)}° ${latDirection} and ${Math.abs(lngDifference).toFixed(1)}° ${lngDirection}.`;\n  }\n\n  function copyResult() {\n    let result = `TREZZLE N.${challengeNumber} ${guessHistory.length}/5\\n\\n`;\n    guessHistory.forEach((guess, index) => {\n      const isCorrect = guess.toUpperCase().replace(/[^A-Z]/g, '') === currentChallenge.answer.toUpperCase().replace(/[^A-Z]/g, '');\n      const status = isCorrect ? '🟩' : '🟥';\n      result += `${index + 1}. ${guess} ${status}\\n`;\n    });\n    navigator.clipboard.writeText(result);\n    alert('Result copied to clipboard!');\n  }\n\n  function shareChallenge() {\n    const url = `${window.location.origin}/challenge/${challengeNumber}`;\n    navigator.clipboard.writeText(url);\n    alert('Challenge URL copied to clipboard!');\n  }\n\n  if (!currentChallenge || !inputValues || inputValues.length === 0) {\n    return <div>{message || 'Loading...'}</div>;\n  }\n\n  return (\n    <div className=\"today-challenge\">\n      <h2>{`Challenge No. ${challengeNumber}`}</h2>\n      <div className=\"difficulty\">Difficulty Level: <strong>{difficulty}</strong></div>\n      <div className=\"clues text-center\">\n        <h3>🗺️ Clues:</h3>\n        <ol className=\"list-unstyled\">\n          {currentChallenge.clues.map((clue, index) => (\n            <li key={index}>{clue}</li>\n          ))}\n        </ol>\n      </div>\n      <div className=\"answer-boxes\">\n        {answerArray.map((char, index) => {\n          if (/[A-Z]/.test(char)) {\n            const inputIndex = letterIndices.indexOf(index);\n            return (\n              <input\n                key={index}\n                type=\"text\"\n                value={inputValues[inputIndex] || ''}\n                onChange={(e) => handleInputChange(e, inputIndex)}\n                onKeyDown={(e) => handleKeyDown(e, inputIndex)}\n                ref={(el) => (inputRefs.current[inputIndex] = el)}\n                disabled={gameEnded}\n                className=\"letter-input\"\n                autoFocus={inputIndex === 0}\n              />\n            );\n          } else {\n            return (\n              <div key={index} className=\"non-letter\">\n                {char}\n              </div>\n            );\n          }\n        })}\n      </div>\n      <button className=\"btn btn-primary mt-2\" onClick={handleSubmit} disabled={gameEnded}>Submit Answer</button>\n      <div className=\"tries\">\n        {Array(triesLeft).fill('🟩').map((box, index) => (\n          <span key={index}>{box}</span>\n        ))}\n      </div>\n      {guessHistory.length > 0 && (\n        <div className=\"guess-history\">\n          <h4>Your Guesses:</h4>\n          <ul>\n            {guessHistory.map((guess, index) => (\n              <li key={index}>{guess}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"message\">\n        {message && (\n          <div className=\"speech-bubble\">\n            🐦‍🔥 {message}\n          </div>\n        )}\n      </div>\n      {gameEnded && (\n        <div>\n          <p>Try the next challenge tomorrow at midnight EST!</p>\n          <button className=\"btn btn-secondary\" onClick={copyResult}>Share Your Result</button>\n          <button className=\"btn btn-secondary ml-2\" onClick={shareChallenge}>Share This Challenge</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Challenge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}