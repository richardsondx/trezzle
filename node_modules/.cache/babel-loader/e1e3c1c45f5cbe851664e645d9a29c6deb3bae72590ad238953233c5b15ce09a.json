{"ast":null,"code":"var _jsxFileName = \"/Users/richardson/Code/react/Trezzle/src/components/Challenge.js\",\n  _s = $RefreshSig$();\n// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Challenge({\n  challengeNumberProp\n}) {\n  _s();\n  const {\n    number\n  } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  // Prepare data for rendering input boxes\n  let answerArray = [];\n  let letterIndices = [];\n  if (currentChallenge && currentChallenge.answer) {\n    answerArray = currentChallenge.answer.toUpperCase().split('');\n    answerArray.forEach((char, index) => {\n      if (/[A-Z]/.test(char)) {\n        letterIndices.push(index);\n      }\n    });\n  }\n\n  // Use effect to focus on the first input box\n  useEffect(() => {\n    if (!gameEnded && letterIndices.length > 0 && inputRefs.current[letterIndices[0]]) {\n      inputRefs.current[letterIndices[0]].focus();\n    }\n  }, [currentChallenge, gameEnded]);\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValues(state.inputValues || []);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n      inputRefs.current = [];\n    }\n  }, [challengeNumber]);\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([new Promise(resolve => {\n      Papa.parse('/worldcities.csv', {\n        download: true,\n        header: true,\n        complete: function (results) {\n          const cities = results.data;\n          const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n          resolve(validCities);\n        }\n      });\n    }), axios.get('https://restcountries.com/v3.1/all').then(response => response.data)]).then(([validCities, countriesData]) => {\n      setLocations(validCities);\n      setCountries(countriesData);\n      if (!currentChallenge) {\n        initializeGame(validCities, countriesData);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData, countriesData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed, countriesData);\n    if (!challenge) {\n      setMessage('No valid challenge could be generated. Please try again later.');\n      return;\n    }\n    setCurrentChallenge(challenge);\n    const initialInputValues = Array(challenge.answer.length).fill('');\n    setInputValues(initialInputValues);\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = Array(challenge.answer.length).fill(null);\n  }\n\n  // ... (Rest of your functions: calculateSeedFromNumber, generateChallenge, generateClues, etc.)\n\n  if (!currentChallenge || !inputValues || inputValues.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message || 'Loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this);\n  }\n\n  // (Rendering logic remains the same)\n}\n_s(Challenge, \"8cieH34qOL4Z4xorFZmZZ2nIgEA=\", false, function () {\n  return [useParams];\n});\n_c = Challenge;\nexport default Challenge;\nvar _c;\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","axios","useParams","START_DATE","jsxDEV","_jsxDEV","Challenge","challengeNumberProp","_s","number","challengeNumber","Number","locations","setLocations","countries","setCountries","currentChallenge","setCurrentChallenge","triesLeft","setTriesLeft","message","setMessage","gameEnded","setGameEnded","difficulty","setDifficulty","guessHistory","setGuessHistory","inputValues","setInputValues","inputRefs","answerArray","letterIndices","answer","toUpperCase","split","forEach","char","index","test","push","length","current","focus","savedState","localStorage","getItem","state","JSON","parse","setItem","stringify","Promise","all","resolve","download","header","complete","results","cities","data","validCities","filter","city","city_ascii","lat","lng","population","get","then","response","countriesData","initializeGame","locationData","seed","calculateSeedFromNumber","challenge","generateChallenge","initialInputValues","Array","fill","level","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/richardson/Code/react/Trezzle/src/components/Challenge.js"],"sourcesContent":["// src/components/Challenge.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { START_DATE } from '../constant.js';\n\nfunction Challenge({ challengeNumberProp }) {\n  const { number } = useParams();\n  const challengeNumber = challengeNumberProp || Number(number);\n  const [locations, setLocations] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [triesLeft, setTriesLeft] = useState(5);\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const inputRefs = useRef([]);\n\n  // Prepare data for rendering input boxes\n  let answerArray = [];\n  let letterIndices = [];\n\n  if (currentChallenge && currentChallenge.answer) {\n    answerArray = currentChallenge.answer.toUpperCase().split('');\n    answerArray.forEach((char, index) => {\n      if (/[A-Z]/.test(char)) {\n        letterIndices.push(index);\n      }\n    });\n  }\n\n  // Use effect to focus on the first input box\n  useEffect(() => {\n    if (!gameEnded && letterIndices.length > 0 && inputRefs.current[letterIndices[0]]) {\n      inputRefs.current[letterIndices[0]].focus();\n    }\n  }, [currentChallenge, gameEnded]);\n\n  useEffect(() => {\n    const savedState = localStorage.getItem(`trezzle_game_state_${challengeNumber}`);\n    if (savedState) {\n      const state = JSON.parse(savedState);\n      setCurrentChallenge(state.currentChallenge);\n      setInputValues(state.inputValues || []);\n      setTriesLeft(state.triesLeft);\n      setMessage(state.message);\n      setGameEnded(state.gameEnded);\n      setDifficulty(state.difficulty);\n      setGuessHistory(state.guessHistory);\n      inputRefs.current = [];\n    }\n  }, [challengeNumber]);\n\n  useEffect(() => {\n    if (currentChallenge) {\n      const state = {\n        currentChallenge,\n        inputValues,\n        triesLeft,\n        message,\n        gameEnded,\n        difficulty,\n        guessHistory,\n      };\n      localStorage.setItem(`trezzle_game_state_${challengeNumber}`, JSON.stringify(state));\n    }\n  }, [currentChallenge, inputValues, triesLeft, message, gameEnded, difficulty, guessHistory, challengeNumber]);\n\n  // Fetch city and country data\n  useEffect(() => {\n    Promise.all([\n      new Promise((resolve) => {\n        Papa.parse('/worldcities.csv', {\n          download: true,\n          header: true,\n          complete: function (results) {\n            const cities = results.data;\n            const validCities = cities.filter(city => city.city_ascii && city.lat && city.lng && city.population);\n            resolve(validCities);\n          },\n        });\n      }),\n      axios.get('https://restcountries.com/v3.1/all').then(response => response.data),\n    ]).then(([validCities, countriesData]) => {\n      setLocations(validCities);\n      setCountries(countriesData);\n      if (!currentChallenge) {\n        initializeGame(validCities, countriesData);\n      }\n    });\n  }, [challengeNumber]);\n\n  // Initialize the game logic\n  function initializeGame(locationData, countriesData) {\n    const seed = calculateSeedFromNumber(challengeNumber);\n    const challenge = generateChallenge(locationData, seed, countriesData);\n\n    if (!challenge) {\n      setMessage('No valid challenge could be generated. Please try again later.');\n      return;\n    }\n\n    setCurrentChallenge(challenge);\n    const initialInputValues = Array(challenge.answer.length).fill('');\n    setInputValues(initialInputValues);\n    setTriesLeft(5);\n    setMessage('');\n    setGameEnded(false);\n    setDifficulty(challenge.level);\n    setGuessHistory([]);\n    inputRefs.current = Array(challenge.answer.length).fill(null);\n  }\n\n  // ... (Rest of your functions: calculateSeedFromNumber, generateChallenge, generateClues, etc.)\n\n  if (!currentChallenge || !inputValues || inputValues.length === 0) {\n    return <div>{message || 'Loading...'}</div>;\n  }\n\n  // (Rendering logic remains the same)\n}\n\nexport default Challenge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}